{
  "version": 3,
  "sources": ["../src/commands.ts"],
  "sourcesContent": ["import { MessageType, type ReportFinalMessage, Stage, Status } from \"./model\";\n\nconst createFinalMesage = () =>\n  ({\n    startMessage: undefined,\n    endMessage: undefined,\n    messages: [],\n  }) as ReportFinalMessage;\n\nconst { EVENT_TEST_BEGIN, EVENT_TEST_FAIL, EVENT_TEST_PASS } = Mocha.Runner.constants;\n\nconst getSuitePath = (test: Mocha.Test): string[] => {\n  const path: string[] = [];\n  let currentSuite: Mocha.Suite | undefined = test.parent;\n\n  while (currentSuite) {\n    if (currentSuite.title) {\n      path.unshift(currentSuite.title);\n    }\n\n    currentSuite = currentSuite.parent;\n  }\n\n  return path;\n};\nconst getStepsMessagesPair = (reportMessage: ReportFinalMessage) =>\n  reportMessage.messages.reduce((acc, message) => {\n    if (message.type !== MessageType.STEP_STARTED && message.type !== MessageType.STEP_ENDED) {\n      return acc;\n    }\n\n    if (message.type === MessageType.STEP_STARTED) {\n      acc.push([message]);\n\n      return acc;\n    }\n\n    const unfinishedStepIdx = acc.findLastIndex((step) => step.length === 1);\n\n    if (unfinishedStepIdx === -1) {\n      return acc;\n    }\n\n    acc[unfinishedStepIdx].push(message);\n\n    return acc;\n  }, []);\n\n// @ts-ignore\nCypress.mocha\n  .getRunner()\n  .on(EVENT_TEST_BEGIN, (test: Mocha.Test) => {\n    const reportMessage = createFinalMesage();\n\n    reportMessage.startMessage = {\n      specPath: getSuitePath(test).concat(test.title),\n      filename: Cypress.spec.relative,\n      start: Date.now(),\n    };\n\n    Cypress.env(\"allure\", { reportMessage });\n  })\n  .on(EVENT_TEST_PASS, () => {\n    const reportMessage: ReportFinalMessage = Cypress.env(\"allure\").reportMessage;\n    const grouppedStepsMessage = getStepsMessagesPair(reportMessage);\n    const unfinishedStepsMessages = grouppedStepsMessage.filter((step) => step.length === 1);\n\n    unfinishedStepsMessages.forEach(() => {\n      reportMessage.messages.push({\n        type: MessageType.STEP_ENDED,\n        payload: {\n          stage: Stage.FINISHED,\n          status: Status.PASSED,\n          stop: Date.now(),\n        },\n      });\n    });\n    reportMessage.endMessage = {\n      stage: Stage.FINISHED,\n      status: Status.PASSED,\n      stop: Date.now(),\n    };\n\n    Cypress.env(\"allure\", { reportMessage });\n  })\n  .on(EVENT_TEST_FAIL, (test: Mocha.Test, err: Error) => {\n    const reportMessage: ReportFinalMessage = Cypress.env(\"allure\").reportMessage;\n\n    reportMessage.endMessage = {\n      stage: Stage.FINISHED,\n      status: err.constructor.name === \"AssertionError\" ? Status.FAILED : Status.BROKEN,\n      statusDetails: {\n        message: err.message,\n        trace: err.stack,\n      },\n      stop: Date.now(),\n    };\n\n    Cypress.env(\"allure\", { reportMessage });\n  });\n\nCypress.Screenshot.defaults({\n  onAfterScreenshot: (_, details) => {\n    const reportMessage: ReportFinalMessage = Cypress.env(\"allure\").reportMessage;\n\n    reportMessage.messages.push({\n      type: MessageType.SCREENSHOT,\n      payload: {\n        path: details.path,\n        name: details.name || \"Screenshot\",\n      },\n    });\n\n    Cypress.env(\"allure\", { reportMessage });\n  },\n});\nCypress.on(\"fail\", (err) => {\n  const reportMessage: ReportFinalMessage = Cypress.env(\"allure\").reportMessage;\n  const hasSteps = reportMessage.messages.some((message) => message.type === MessageType.STEP_STARTED);\n\n  // if there is no steps, don't handle the error\n  if (!hasSteps) {\n    throw err;\n  }\n\n  const grouppedStepsMessage = getStepsMessagesPair(reportMessage);\n  const unfinishedStepsMessages = grouppedStepsMessage.filter((step) => step.length === 1);\n\n  if (unfinishedStepsMessages.length === 0) {\n    throw err;\n  }\n\n  const failedStepsStatus = err.constructor.name === \"AssertionError\" ? Status.FAILED : Status.BROKEN;\n\n  unfinishedStepsMessages.forEach(() => {\n    reportMessage.messages.push({\n      type: MessageType.STEP_ENDED,\n      payload: {\n        stage: Stage.FINISHED,\n        status: failedStepsStatus,\n        stop: Date.now(),\n        statusDetails: {\n          message: err.message,\n          trace: err.stack,\n        },\n      },\n    });\n  });\n\n  Cypress.env(\"allure\", { reportMessage });\n\n  throw err;\n});\n\nafterEach(() => {\n  const reportMessage = Cypress.env(\"allure\").reportMessage;\n\n  cy.task(\"allureReportTest\", reportMessage, { log: false });\n});\n"],
  "mappings": "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",
  "names": []
}
