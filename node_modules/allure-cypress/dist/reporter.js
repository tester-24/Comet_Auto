var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../.yarn/cache/ansi-regex-npm-4.1.1-af0a582bb9-b1a6ee44cb.zip/node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS({
  "../../.yarn/cache/ansi-regex-npm-4.1.1-af0a582bb9-b1a6ee44cb.zip/node_modules/ansi-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (options) => {
      options = Object.assign({
        onlyFirst: false
      }, options);
      const pattern = [
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
      ].join("|");
      return new RegExp(pattern, options.onlyFirst ? void 0 : "g");
    };
  }
});

// ../../.yarn/cache/strip-ansi-npm-5.2.0-275214c316-bdb5f76ade.zip/node_modules/strip-ansi/index.js
var require_strip_ansi = __commonJS({
  "../../.yarn/cache/strip-ansi-npm-5.2.0-275214c316-bdb5f76ade.zip/node_modules/strip-ansi/index.js"(exports2, module2) {
    "use strict";
    var ansiRegex = require_ansi_regex();
    var stripAnsi = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
    module2.exports = stripAnsi;
    module2.exports.default = stripAnsi;
  }
});

// ../allure-js-commons/dist/src/model.js
var require_model = __commonJS({
  "../allure-js-commons/dist/src/model.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LinkType = exports2.ContentType = exports2.Severity = exports2.LabelName = exports2.Stage = exports2.Status = exports2.ALLURE_SKIPPED_BY_TEST_PLAN_LABEL = exports2.ALLURE_IMAGEDIFF_CONTENT_TYPE = exports2.ALLURE_METADATA_CONTENT_TYPE = void 0;
    exports2.ALLURE_METADATA_CONTENT_TYPE = "application/vnd.allure.metadata+json";
    exports2.ALLURE_IMAGEDIFF_CONTENT_TYPE = "application/vnd.allure.image.diff";
    exports2.ALLURE_SKIPPED_BY_TEST_PLAN_LABEL = "allure-skipped-by-test-plan";
    var Status;
    (function(Status2) {
      Status2["FAILED"] = "failed";
      Status2["BROKEN"] = "broken";
      Status2["PASSED"] = "passed";
      Status2["SKIPPED"] = "skipped";
    })(Status || (exports2.Status = Status = {}));
    var Stage2;
    (function(Stage3) {
      Stage3["SCHEDULED"] = "scheduled";
      Stage3["RUNNING"] = "running";
      Stage3["FINISHED"] = "finished";
      Stage3["PENDING"] = "pending";
      Stage3["INTERRUPTED"] = "interrupted";
    })(Stage2 || (exports2.Stage = Stage2 = {}));
    var LabelName2;
    (function(LabelName3) {
      LabelName3["ALLURE_ID"] = "ALLURE_ID";
      LabelName3["AS_ID"] = "ALLURE_ID";
      LabelName3["SUITE"] = "suite";
      LabelName3["PARENT_SUITE"] = "parentSuite";
      LabelName3["SUB_SUITE"] = "subSuite";
      LabelName3["EPIC"] = "epic";
      LabelName3["FEATURE"] = "feature";
      LabelName3["STORY"] = "story";
      LabelName3["SEVERITY"] = "severity";
      LabelName3["TAG"] = "tag";
      LabelName3["OWNER"] = "owner";
      LabelName3["LEAD"] = "lead";
      LabelName3["HOST"] = "host";
      LabelName3["THREAD"] = "thread";
      LabelName3["TEST_METHOD"] = "testMethod";
      LabelName3["TEST_CLASS"] = "testClass";
      LabelName3["PACKAGE"] = "package";
      LabelName3["FRAMEWORK"] = "framework";
      LabelName3["LANGUAGE"] = "language";
      LabelName3["LAYER"] = "layer";
    })(LabelName2 || (exports2.LabelName = LabelName2 = {}));
    var Severity;
    (function(Severity2) {
      Severity2["BLOCKER"] = "blocker";
      Severity2["CRITICAL"] = "critical";
      Severity2["NORMAL"] = "normal";
      Severity2["MINOR"] = "minor";
      Severity2["TRIVIAL"] = "trivial";
    })(Severity || (exports2.Severity = Severity = {}));
    var ContentType;
    (function(ContentType2) {
      ContentType2["TEXT"] = "text/plain";
      ContentType2["XML"] = "application/xml";
      ContentType2["HTML"] = "text/html";
      ContentType2["CSV"] = "text/csv";
      ContentType2["TSV"] = "text/tab-separated-values";
      ContentType2["CSS"] = "text/css";
      ContentType2["URI"] = "text/uri-list";
      ContentType2["SVG"] = "image/svg+xml";
      ContentType2["PNG"] = "image/png";
      ContentType2["JSON"] = "application/json";
      ContentType2["ZIP"] = "application/zip";
      ContentType2["WEBM"] = "video/webm";
      ContentType2["JPEG"] = "image/jpeg";
      ContentType2["MP4"] = "video/mp4";
    })(ContentType || (exports2.ContentType = ContentType = {}));
    var LinkType;
    (function(LinkType2) {
      LinkType2["ISSUE"] = "issue";
      LinkType2["TMS"] = "tms";
    })(LinkType || (exports2.LinkType = LinkType = {}));
  }
});

// ../allure-js-commons/dist/src/AllureCommandStep.js
var require_AllureCommandStep = __commonJS({
  "../allure-js-commons/dist/src/AllureCommandStep.js"(exports2) {
    "use strict";
    var __rest = exports2 && exports2.__rest || function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AllureCommandStepExecutable = void 0;
    var strip_ansi_1 = __importDefault(require_strip_ansi());
    var model_1 = require_model();
    var AllureCommandStepExecutable = class _AllureCommandStepExecutable {
      constructor(name) {
        this.name = "";
        this.attachments = [];
        this.metadata = {};
        this.name = name;
      }
      static toExecutableItem(runtime, stepMetadata) {
        var _a, _b;
        const executable = Object.assign(Object.assign({}, stepMetadata), { attachments: [], steps: [] });
        if (((_a = stepMetadata.attachments) === null || _a === void 0 ? void 0 : _a.length) > 0) {
          stepMetadata.attachments.forEach((attachment) => {
            const attachmentContent = Buffer.from(attachment.content, attachment.encoding);
            const attachmentFilename = runtime.writeAttachment(attachmentContent, attachment.type, attachment.encoding);
            executable.attachments.push({
              name: attachment.name,
              type: attachment.type,
              source: attachmentFilename
            });
          });
        }
        if (((_b = stepMetadata.steps) === null || _b === void 0 ? void 0 : _b.length) > 0) {
          executable.steps = stepMetadata.steps.map((nestedStep) => _AllureCommandStepExecutable.toExecutableItem(runtime, nestedStep));
        }
        return executable;
      }
      label(label, value) {
        if (!this.metadata.labels) {
          this.metadata.labels = [];
        }
        this.metadata.labels.push({
          name: label,
          value
        });
      }
      link(url, name, type) {
        if (!this.metadata.links) {
          this.metadata.links = [];
        }
        this.metadata.links.push({
          name,
          url,
          type
        });
      }
      parameter(name, value, options) {
        if (!this.metadata.parameter) {
          this.metadata.parameter = [];
        }
        this.metadata.parameter.push({
          name,
          value: JSON.stringify(value),
          excluded: (options === null || options === void 0 ? void 0 : options.excluded) || false,
          mode: options === null || options === void 0 ? void 0 : options.mode
        });
      }
      epic(epic) {
        this.label(model_1.LabelName.EPIC, epic);
      }
      feature(feature) {
        this.label(model_1.LabelName.FEATURE, feature);
      }
      story(story) {
        this.label(model_1.LabelName.STORY, story);
      }
      suite(name) {
        this.label(model_1.LabelName.SUITE, name);
      }
      parentSuite(name) {
        this.label(model_1.LabelName.PARENT_SUITE, name);
      }
      subSuite(name) {
        this.label(model_1.LabelName.SUB_SUITE, name);
      }
      owner(owner) {
        this.label(model_1.LabelName.OWNER, owner);
      }
      severity(severity) {
        this.label(model_1.LabelName.SEVERITY, severity);
      }
      tag(tag) {
        this.label(model_1.LabelName.TAG, tag);
      }
      issue(name, url) {
        this.link(url, name, model_1.LinkType.ISSUE);
      }
      tms(name, url) {
        this.link(url, name, model_1.LinkType.TMS);
      }
      attach(content, type) {
        const isBuffer = Buffer.isBuffer(content);
        this.attachments.push({
          name: "attachment",
          content: isBuffer ? content.toString("base64") : content,
          encoding: isBuffer ? "base64" : "utf8",
          type
        });
      }
      description(content) {
        this.metadata.description = content;
      }
      async step(name, body) {
        if (!this.metadata.steps) {
          this.metadata.steps = [];
        }
        const nestedStep = new _AllureCommandStepExecutable(name);
        await nestedStep.run(body, async ({ labels = [], links = [], parameter = [], steps = [] }) => {
          this.metadata.labels = (this.metadata.labels || []).concat(labels);
          this.metadata.links = (this.metadata.links || []).concat(links);
          this.metadata.parameter = (this.metadata.parameter || []).concat(parameter);
          this.metadata.steps = (this.metadata.steps || []).concat(steps);
        });
      }
      async start(body) {
        return await new Promise((resolve) => this.run(body, async (result) => resolve(result)));
      }
      async run(body, messageEmitter) {
        const startDate = (/* @__PURE__ */ new Date()).getTime();
        try {
          await body.call(this, this);
          const _a = this.metadata, { steps = [], description = "", descriptionHtml = "" } = _a, metadata = __rest(_a, ["steps", "description", "descriptionHtml"]);
          await messageEmitter(Object.assign(Object.assign({}, metadata), { steps: [
            {
              name: this.name,
              start: startDate,
              stop: (/* @__PURE__ */ new Date()).getTime(),
              stage: model_1.Stage.FINISHED,
              status: model_1.Status.PASSED,
              statusDetails: {},
              attachments: this.attachments,
              parameters: [],
              steps,
              description
            }
          ] }));
        } catch (e) {
          const _b = this.metadata, { steps = [], description = "", descriptionHtml = "" } = _b, metadata = __rest(_b, ["steps", "description", "descriptionHtml"]);
          await messageEmitter(Object.assign(Object.assign({}, metadata), { steps: [
            {
              name: this.name,
              start: startDate,
              stop: (/* @__PURE__ */ new Date()).getTime(),
              stage: model_1.Stage.FINISHED,
              status: model_1.Status.BROKEN,
              statusDetails: {
                message: (0, strip_ansi_1.default)(e.message || ""),
                trace: (0, strip_ansi_1.default)(e.stack || "")
              },
              attachments: this.attachments,
              parameters: [],
              steps,
              description
            }
          ] }));
          throw e;
        }
      }
    };
    exports2.AllureCommandStepExecutable = AllureCommandStepExecutable;
  }
});

// ../allure-js-commons/dist/src/constructors.js
var require_constructors = __commonJS({
  "../allure-js-commons/dist/src/constructors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testResult = exports2.stepResult = exports2.fixtureResult = exports2.testResultContainer = void 0;
    var crypto_1 = require("crypto");
    var model_1 = require_model();
    var testResultContainer = () => {
      return {
        uuid: (0, crypto_1.randomUUID)(),
        children: [],
        befores: [],
        afters: []
      };
    };
    exports2.testResultContainer = testResultContainer;
    var fixtureResult = () => {
      return {
        status: model_1.Status.BROKEN,
        statusDetails: {},
        stage: model_1.Stage.PENDING,
        steps: [],
        attachments: [],
        parameters: []
      };
    };
    exports2.fixtureResult = fixtureResult;
    var stepResult = () => {
      return {
        status: void 0,
        statusDetails: {},
        stage: model_1.Stage.PENDING,
        steps: [],
        attachments: [],
        parameters: []
      };
    };
    exports2.stepResult = stepResult;
    var testResult = () => {
      return {
        uuid: (0, crypto_1.randomUUID)(),
        historyId: (0, crypto_1.randomUUID)(),
        status: void 0,
        statusDetails: {},
        stage: model_1.Stage.PENDING,
        steps: [],
        attachments: [],
        parameters: [],
        labels: [],
        links: []
      };
    };
    exports2.testResult = testResult;
  }
});

// ../allure-js-commons/dist/src/isPromise.js
var require_isPromise = __commonJS({
  "../allure-js-commons/dist/src/isPromise.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isPromise = void 0;
    var isPromise = (obj) => !!obj && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
    exports2.isPromise = isPromise;
  }
});

// ../allure-js-commons/dist/src/utils.js
var require_utils = __commonJS({
  "../allure-js-commons/dist/src/utils.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractMetadataFromString = exports2.serialize = exports2.getSuitesLabels = exports2.getStatusFromError = exports2.allureLabelRegexpGlobal = exports2.allureLabelRegexp = exports2.allureIdRegexpGlobal = exports2.allureIdRegexp = exports2.defaultReportFolder = exports2.allureReportFolder = exports2.stripAscii = exports2.readImageAsBase64 = exports2.isAllStepsEnded = exports2.isAnyStepFailed = exports2.escapeRegExp = exports2.getLabelsFromEnv = exports2.md5 = void 0;
    var crypto_1 = require("crypto");
    var promises_1 = require("fs/promises");
    var path_1 = __importDefault(require("path"));
    var process_1 = require("process");
    var model_1 = require_model();
    var md5 = (data) => (0, crypto_1.createHash)("md5").update(data).digest("hex");
    exports2.md5 = md5;
    var getLabelsFromEnv = () => {
      const envKeys = Object.keys(process_1.env);
      const labels = [];
      envKeys.forEach((key) => {
        var _a;
        const labelRegexp = /^ALLURE_LABEL_(?<labelName>.+)$/;
        const match = key.match(labelRegexp);
        if (match) {
          const labelName = (_a = match.groups) === null || _a === void 0 ? void 0 : _a.labelName;
          const envValue = process.env[key];
          if (labelName && envValue) {
            labels.push({ name: labelName.toLocaleLowerCase(), value: envValue });
          }
        }
      });
      return labels;
    };
    exports2.getLabelsFromEnv = getLabelsFromEnv;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reHasRegExpChar = RegExp(reRegExpChar.source);
    var escapeRegExp = (value) => {
      return reHasRegExpChar.test(value) ? value.replace(reRegExpChar, "\\$&") : value;
    };
    exports2.escapeRegExp = escapeRegExp;
    var isAnyStepFailed = (item) => {
      const isFailed = item.status === model_1.Status.FAILED;
      if (isFailed || item.steps.length === 0) {
        return isFailed;
      }
      return !!item.steps.find((step) => (0, exports2.isAnyStepFailed)(step));
    };
    exports2.isAnyStepFailed = isAnyStepFailed;
    var isAllStepsEnded = (item) => {
      return item.steps.every((val) => val.stop && (0, exports2.isAllStepsEnded)(val));
    };
    exports2.isAllStepsEnded = isAllStepsEnded;
    var readImageAsBase64 = async (filePath) => {
      try {
        const file = await (0, promises_1.readFile)(filePath, { encoding: "base64" });
        return file ? `data:image/png;base64,${file}` : void 0;
      } catch (e) {
        return void 0;
      }
    };
    exports2.readImageAsBase64 = readImageAsBase64;
    var asciiRegex = new RegExp("[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))", "g");
    var stripAscii = (str) => {
      return str.replace(asciiRegex, "");
    };
    exports2.stripAscii = stripAscii;
    var allureReportFolder = (outputFolder) => {
      if (process.env.ALLURE_RESULTS_DIR) {
        return path_1.default.resolve(process.cwd(), process.env.ALLURE_RESULTS_DIR);
      }
      if (outputFolder) {
        return outputFolder;
      }
      return (0, exports2.defaultReportFolder)();
    };
    exports2.allureReportFolder = allureReportFolder;
    var defaultReportFolder = () => {
      return path_1.default.resolve(process.cwd(), "allure-results");
    };
    exports2.defaultReportFolder = defaultReportFolder;
    exports2.allureIdRegexp = /@?allure.id[:=](?<id>[^\s]+)/;
    exports2.allureIdRegexpGlobal = new RegExp(exports2.allureIdRegexp, "g");
    exports2.allureLabelRegexp = /@?allure.label.(?<name>[^\s]+?)[:=](?<value>[^\s]+)/;
    exports2.allureLabelRegexpGlobal = new RegExp(exports2.allureLabelRegexp, "g");
    var getStatusFromError = (error) => {
      switch (true) {
        case /assert/gi.test(error.constructor.name):
        case /assert/gi.test(error.name):
        case /assert/gi.test(error.message):
          return model_1.Status.FAILED;
        default:
          return model_1.Status.BROKEN;
      }
    };
    exports2.getStatusFromError = getStatusFromError;
    var getSuitesLabels2 = (suites) => {
      if (suites.length === 0) {
        return [];
      }
      const [parentSuite, suite, ...subSuites] = suites;
      const labels = [];
      if (parentSuite) {
        labels.push({
          name: model_1.LabelName.PARENT_SUITE,
          value: parentSuite
        });
      }
      if (suite) {
        labels.push({
          name: model_1.LabelName.SUITE,
          value: suite
        });
      }
      if (subSuites.length > 0) {
        labels.push({
          name: model_1.LabelName.SUB_SUITE,
          value: subSuites.join(" > ")
        });
      }
      return labels;
    };
    exports2.getSuitesLabels = getSuitesLabels2;
    var serialize = (val) => {
      if (typeof val === "object" && !(val instanceof Map || val instanceof Set)) {
        return JSON.stringify(val);
      }
      if (val === void 0) {
        return "undefined";
      }
      return val.toString();
    };
    exports2.serialize = serialize;
    var extractMetadataFromString2 = (title) => {
      const labels = [];
      title.split(" ").forEach((val) => {
        var _a, _b;
        const idValue = (_b = (_a = val.match(exports2.allureIdRegexp)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.id;
        if (idValue) {
          labels.push({ name: model_1.LabelName.ALLURE_ID, value: idValue });
        }
        const labelMatch = val.match(exports2.allureLabelRegexp);
        const { name, value } = (labelMatch === null || labelMatch === void 0 ? void 0 : labelMatch.groups) || {};
        if (name && value) {
          labels === null || labels === void 0 ? void 0 : labels.push({ name, value });
        }
      });
      const cleanTitle = title.replace(exports2.allureLabelRegexpGlobal, "").replace(exports2.allureIdRegexpGlobal, "").trim();
      return { labels, cleanTitle };
    };
    exports2.extractMetadataFromString = extractMetadataFromString2;
  }
});

// ../allure-js-commons/dist/src/ExecutableItemWrapper.js
var require_ExecutableItemWrapper = __commonJS({
  "../allure-js-commons/dist/src/ExecutableItemWrapper.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AllureStep = exports2.ExecutableItemWrapper = void 0;
    var constructors_1 = require_constructors();
    var isPromise_1 = require_isPromise();
    var model_1 = require_model();
    var utils_1 = require_utils();
    var ExecutableItemWrapper = class {
      constructor(info) {
        this.info = info;
      }
      get wrappedItem() {
        return this.info;
      }
      set name(name) {
        this.info.name = name;
      }
      set description(description) {
        this.info.description = description;
      }
      set descriptionHtml(descriptionHtml) {
        this.info.descriptionHtml = descriptionHtml;
      }
      set status(status) {
        this.info.status = status;
      }
      get status() {
        return this.info.status;
      }
      set statusDetails(details) {
        this.info.statusDetails = details;
      }
      set detailsMessage(message) {
        this.info.statusDetails.message = message;
      }
      set detailsTrace(trace) {
        this.info.statusDetails.trace = trace;
      }
      set stage(stage) {
        this.info.stage = stage;
      }
      parameter(name, value, options) {
        this.info.parameters.push(Object.assign(Object.assign({}, options), { name, value: (0, utils_1.serialize)(value) }));
      }
      get isAnyStepFailed() {
        return (0, utils_1.isAnyStepFailed)(this.info);
      }
      get isAllStepsEnded() {
        return (0, utils_1.isAllStepsEnded)(this.info);
      }
      addParameter(name, value, options) {
        this.parameter(name, value, options);
      }
      addAttachment(name, options, fileName) {
        if (typeof options === "string") {
          options = { contentType: options };
        }
        this.info.attachments.push({ name, type: options.contentType, source: fileName });
      }
      startStep(name, start) {
        const result = (0, constructors_1.stepResult)();
        this.info.steps.push(result);
        const allureStep = new AllureStep2(result, start);
        allureStep.name = name;
        return allureStep;
      }
      wrap(fun) {
        return (...args) => {
          this.stage = model_1.Stage.RUNNING;
          let result;
          try {
            result = fun(args);
          } catch (error) {
            this.stage = model_1.Stage.INTERRUPTED;
            this.status = model_1.Status.BROKEN;
            if (error) {
              this.detailsMessage = error.message || "";
              this.detailsTrace = error.stack || "";
            }
            throw error;
          }
          if ((0, isPromise_1.isPromise)(result)) {
            const promise = result;
            return promise.then((res) => {
              this.status = model_1.Status.PASSED;
              this.stage = model_1.Stage.FINISHED;
              return res;
            }).catch((error) => {
              this.stage = model_1.Stage.INTERRUPTED;
              this.status = model_1.Status.BROKEN;
              if (error) {
                this.detailsMessage = error.message || "";
                this.detailsTrace = error.stack || "";
              }
              throw error;
            });
          } else {
            this.status = model_1.Status.PASSED;
            this.stage = model_1.Stage.FINISHED;
            return result;
          }
        };
      }
      addStep(step) {
        this.info.steps.push(step);
      }
    };
    exports2.ExecutableItemWrapper = ExecutableItemWrapper;
    var AllureStep2 = class extends ExecutableItemWrapper {
      constructor(stepResult, start = Date.now()) {
        super(stepResult);
        this.stepResult = stepResult;
        this.stepResult.start = start;
      }
      endStep(stop = Date.now()) {
        this.stepResult.stop = stop;
      }
    };
    exports2.AllureStep = AllureStep2;
  }
});

// ../allure-js-commons/dist/src/AllureTest.js
var require_AllureTest = __commonJS({
  "../allure-js-commons/dist/src/AllureTest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AllureTest = void 0;
    var AllureCommandStep_1 = require_AllureCommandStep();
    var ExecutableItemWrapper_1 = require_ExecutableItemWrapper();
    var constructors_1 = require_constructors();
    var model_1 = require_model();
    var utils_1 = require_utils();
    var AllureTest2 = class extends ExecutableItemWrapper_1.ExecutableItemWrapper {
      constructor(runtime, start = Date.now()) {
        super((0, constructors_1.testResult)());
        this.runtime = runtime;
        this.historyIdSetManually = false;
        const globalLabels = (0, utils_1.getLabelsFromEnv)();
        this.testResult = this.wrappedItem;
        this.testResult.start = start;
        globalLabels.forEach((label) => this.addLabel(label.name, label.value));
      }
      endTest(stop = Date.now()) {
        this.testResult.stop = stop;
        this.runtime.writeResult(this.testResult);
      }
      get uuid() {
        return this.testResult.uuid;
      }
      set historyId(id) {
        this.historyIdSetManually = true;
        this.testResult.historyId = id;
      }
      set fullName(fullName) {
        this.testResult.fullName = fullName;
      }
      set testCaseId(testCaseId) {
        this.testResult.testCaseId = testCaseId;
      }
      addLabel(name, value) {
        this.testResult.labels.push({ name, value });
      }
      addLink(url, name, type) {
        this.testResult.links.push({ name, url, type });
      }
      addIssueLink(url, name) {
        this.addLink(url, name, model_1.LinkType.ISSUE);
      }
      addTmsLink(url, name) {
        this.addLink(url, name, model_1.LinkType.TMS);
      }
      calculateHistoryId() {
        if (this.historyIdSetManually) {
          return;
        }
        const tcId = this.testResult.testCaseId ? this.testResult.testCaseId : this.testResult.fullName ? (0, utils_1.md5)(this.testResult.fullName) : null;
        if (!tcId) {
          return;
        }
        const paramsString = this.testResult.parameters.filter((p) => !(p === null || p === void 0 ? void 0 : p.excluded)).sort((a, b) => {
          var _a, _b;
          return ((_a = a.name) === null || _a === void 0 ? void 0 : _a.localeCompare(b === null || b === void 0 ? void 0 : b.name)) || ((_b = a.value) === null || _b === void 0 ? void 0 : _b.localeCompare(b === null || b === void 0 ? void 0 : b.value));
        }).map((p) => {
          var _a, _b;
          return `${(_a = p.name) !== null && _a !== void 0 ? _a : "null"}:${(_b = p.value) !== null && _b !== void 0 ? _b : "null"}`;
        }).join(",");
        const paramsHash = (0, utils_1.md5)(paramsString);
        this.historyId = `${tcId}:${paramsHash}`;
      }
      applyMetadata(metadata, stepApplyFn) {
        const { attachments = [], labels = [], links = [], parameter = [], steps = [], description, descriptionHtml, displayName, historyId, testCaseId } = metadata;
        labels.forEach((label) => {
          this.addLabel(label.name, label.value);
        });
        links.forEach((link) => {
          this.addLink(link.url, link.name, link.type);
        });
        parameter.forEach((param) => {
          this.parameter(param.name, param.value, {
            excluded: param.excluded,
            mode: param.mode
          });
        });
        attachments.forEach((attachment) => {
          const attachmentFilename = this.runtime.writeAttachment(attachment.content, attachment.type, attachment.encoding);
          this.addAttachment(attachment.name, {
            contentType: attachment.type
          }, attachmentFilename);
        });
        if (description) {
          this.description = description;
        }
        if (descriptionHtml) {
          this.descriptionHtml = descriptionHtml;
        }
        if (displayName) {
          this.name = displayName;
        }
        if (testCaseId) {
          this.testCaseId = testCaseId;
        }
        if (historyId) {
          this.historyId = historyId;
        }
        steps.forEach((stepMetadata) => {
          const step = AllureCommandStep_1.AllureCommandStepExecutable.toExecutableItem(this.runtime, stepMetadata);
          if (stepApplyFn) {
            stepApplyFn(step);
            return;
          }
          this.addStep(step);
        });
      }
    };
    exports2.AllureTest = AllureTest2;
  }
});

// ../allure-js-commons/dist/src/AllureGroup.js
var require_AllureGroup = __commonJS({
  "../allure-js-commons/dist/src/AllureGroup.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AllureGroup = void 0;
    var AllureTest_1 = require_AllureTest();
    var ExecutableItemWrapper_1 = require_ExecutableItemWrapper();
    var constructors_1 = require_constructors();
    var AllureGroup = class _AllureGroup {
      constructor(runtime) {
        this.runtime = runtime;
        this.testResultContainer = (0, constructors_1.testResultContainer)();
      }
      startGroup(name) {
        const group = new _AllureGroup(this.runtime);
        this.testResultContainer.children.push(group.uuid);
        group.name = name || "Unnamed";
        return group;
      }
      startTest(name, start) {
        const test = new AllureTest_1.AllureTest(this.runtime, start);
        this.testResultContainer.children.push(test.uuid);
        test.name = name || "Unnamed";
        return test;
      }
      endGroup() {
        this.runtime.writeGroup(this.testResultContainer);
      }
      get uuid() {
        return this.testResultContainer.uuid;
      }
      get name() {
        return this.testResultContainer.name || "";
      }
      set name(name) {
        this.testResultContainer.name = name;
      }
      addBefore() {
        const result = (0, constructors_1.fixtureResult)();
        this.testResultContainer.befores.push(result);
        return new ExecutableItemWrapper_1.ExecutableItemWrapper(result);
      }
      addAfter() {
        const result = (0, constructors_1.fixtureResult)();
        this.testResultContainer.afters.push(result);
        return new ExecutableItemWrapper_1.ExecutableItemWrapper(result);
      }
    };
    exports2.AllureGroup = AllureGroup;
  }
});

// ../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/stringifier.js
var require_stringifier = __commonJS({
  "../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/stringifier.js"(exports2, module2) {
    "use strict";
    var Stringifier = module2.exports = function() {
      this._header = null;
      this._lines = [];
    };
    Stringifier.prototype.header = function(comment) {
      this._header = comment;
      return this;
    };
    Stringifier.prototype.property = function(p) {
      p.property = true;
      this._lines.push(p);
      return this;
    };
    Stringifier.prototype.section = function(p) {
      if (typeof p === "string") {
        p = { name: p };
      }
      p.section = true;
      this._lines.push(p);
      return this;
    };
  }
});

// ../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/parse.js
var require_parse = __commonJS({
  "../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/parse.js"(exports2, module2) {
    "use strict";
    var hex = function(c) {
      switch (c) {
        case "0":
          return 0;
        case "1":
          return 1;
        case "2":
          return 2;
        case "3":
          return 3;
        case "4":
          return 4;
        case "5":
          return 5;
        case "6":
          return 6;
        case "7":
          return 7;
        case "8":
          return 8;
        case "9":
          return 9;
        case "a":
        case "A":
          return 10;
        case "b":
        case "B":
          return 11;
        case "c":
        case "C":
          return 12;
        case "d":
        case "D":
          return 13;
        case "e":
        case "E":
          return 14;
        case "f":
        case "F":
          return 15;
      }
    };
    module2.exports = function(data, options, handlers, control) {
      var c;
      var code;
      var escape;
      var skipSpace = true;
      var isCommentLine;
      var isSectionLine;
      var newLine = true;
      var multiLine;
      var isKey = true;
      var key = "";
      var value = "";
      var section;
      var unicode;
      var unicodeRemaining;
      var escapingUnicode;
      var keySpace;
      var sep;
      var ignoreLine;
      var line = function() {
        if (key || value || sep) {
          handlers.line(key, value);
          key = "";
          value = "";
          sep = false;
        }
      };
      var escapeString = function(key2, c2, code2) {
        if (escapingUnicode && unicodeRemaining) {
          unicode = (unicode << 4) + hex(c2);
          if (--unicodeRemaining)
            return key2;
          escape = false;
          escapingUnicode = false;
          return key2 + String.fromCharCode(unicode);
        }
        if (code2 === 117) {
          unicode = 0;
          escapingUnicode = true;
          unicodeRemaining = 4;
          return key2;
        }
        escape = false;
        if (code2 === 116)
          return key2 + "	";
        else if (code2 === 114)
          return key2 + "\r";
        else if (code2 === 110)
          return key2 + "\n";
        else if (code2 === 102)
          return key2 + "\f";
        return key2 + c2;
      };
      var isComment;
      var isSeparator;
      if (options._strict) {
        isComment = function(c2, code2, options2) {
          return options2._comments[c2];
        };
        isSeparator = function(c2, code2, options2) {
          return options2._separators[c2];
        };
      } else {
        isComment = function(c2, code2, options2) {
          return code2 === 35 || code2 === 33 || options2._comments[c2];
        };
        isSeparator = function(c2, code2, options2) {
          return code2 === 61 || code2 === 58 || options2._separators[c2];
        };
      }
      for (var i = ~~control.resume; i < data.length; i++) {
        if (control.abort)
          return;
        if (control.pause) {
          control.resume = i;
          return;
        }
        c = data[i];
        code = data.charCodeAt(i);
        if (code === 13)
          continue;
        if (isCommentLine) {
          if (code === 10) {
            isCommentLine = false;
            newLine = true;
            skipSpace = true;
          }
          continue;
        }
        if (isSectionLine && code === 93) {
          handlers.section(section);
          ignoreLine = true;
          continue;
        }
        if (skipSpace) {
          if (code === 32 || code === 9 || code === 12) {
            continue;
          }
          if (!multiLine && code === 10) {
            isKey = true;
            keySpace = false;
            newLine = true;
            line();
            continue;
          }
          skipSpace = false;
          multiLine = false;
        }
        if (newLine) {
          newLine = false;
          if (isComment(c, code, options)) {
            isCommentLine = true;
            continue;
          }
          if (options.sections && code === 91) {
            section = "";
            isSectionLine = true;
            control.skipSection = false;
            continue;
          }
        }
        if (code !== 10) {
          if (control.skipSection || ignoreLine)
            continue;
          if (!isSectionLine) {
            if (!escape && isKey && isSeparator(c, code, options)) {
              sep = true;
              isKey = false;
              keySpace = false;
              skipSpace = true;
              continue;
            }
          }
          if (code === 92) {
            if (escape) {
              if (escapingUnicode)
                continue;
              if (keySpace) {
                keySpace = false;
                isKey = false;
              }
              if (isSectionLine)
                section += "\\";
              else if (isKey)
                key += "\\";
              else
                value += "\\";
            }
            escape = !escape;
          } else {
            if (keySpace) {
              keySpace = false;
              isKey = false;
            }
            if (isSectionLine) {
              if (escape)
                section = escapeString(section, c, code);
              else
                section += c;
            } else if (isKey) {
              if (escape) {
                key = escapeString(key, c, code);
              } else {
                if (code === 32 || code === 9 || code === 12) {
                  keySpace = true;
                  skipSpace = true;
                  continue;
                }
                key += c;
              }
            } else {
              if (escape)
                value = escapeString(value, c, code);
              else
                value += c;
            }
          }
        } else {
          if (escape) {
            if (!escapingUnicode) {
              escape = false;
            }
            skipSpace = true;
            multiLine = true;
          } else {
            if (isSectionLine) {
              isSectionLine = false;
              if (!ignoreLine) {
                control.error = new Error('The section line "' + section + '" must end with "]"');
                return;
              }
              ignoreLine = false;
            }
            newLine = true;
            skipSpace = true;
            isKey = true;
            line();
          }
        }
      }
      control.parsed = true;
      if (isSectionLine && !ignoreLine) {
        control.error = new Error('The section line "' + section + '" must endwith "]"');
        return;
      }
      line();
    };
  }
});

// ../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/read.js
var require_read = __commonJS({
  "../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/read.js"(exports2, module2) {
    "use strict";
    var fs = require("fs");
    var path = require("path");
    var parse = require_parse();
    var INCLUDE_KEY = "include";
    var INDEX_FILE = "index.properties";
    var cast = function(value) {
      if (value === null || value === "null")
        return null;
      if (value === "undefined")
        return void 0;
      if (value === "true")
        return true;
      if (value === "false")
        return false;
      var v = Number(value);
      return isNaN(v) ? value : v;
    };
    var expand = function(o, str, options, cb) {
      if (!options.variables || !str)
        return cb(null, str);
      var stack = [];
      var c;
      var cp;
      var key = "";
      var section = null;
      var v;
      var holder;
      var t;
      var n;
      for (var i = 0; i < str.length; i++) {
        c = str[i];
        if (cp === "$" && c === "{") {
          key = key.substring(0, key.length - 1);
          stack.push({
            key,
            section
          });
          key = "";
          section = null;
          continue;
        } else if (stack.length) {
          if (options.sections && c === "|") {
            section = key;
            key = "";
            continue;
          } else if (c === "}") {
            holder = section !== null ? searchValue(o, section, true) : o;
            if (!holder) {
              return cb(new Error('The section "' + section + '" does not exist'));
            }
            v = options.namespaces ? searchValue(holder, key) : holder[key];
            if (v === void 0) {
              v = options.namespaces ? searchValue(options._vars, key) : options._vars[key];
              if (v === void 0) {
                return cb(new Error('The property "' + key + '" does not exist'));
              }
            }
            t = stack.pop();
            section = t.section;
            key = t.key + (v === null ? "" : v);
            continue;
          }
        }
        cp = c;
        key += c;
      }
      if (stack.length !== 0) {
        return cb(new Error("Malformed variable: " + str));
      }
      cb(null, key);
    };
    var searchValue = function(o, chain, section) {
      var n = chain.split(".");
      var str;
      for (var i = 0; i < n.length - 1; i++) {
        str = n[i];
        if (o[str] === void 0)
          return;
        o = o[str];
      }
      var v = o[n[n.length - 1]];
      if (section) {
        if (typeof v !== "object")
          return;
        return v;
      } else {
        if (typeof v === "object")
          return;
        return v;
      }
    };
    var namespaceKey = function(o, key, value) {
      var n = key.split(".");
      var str;
      for (var i = 0; i < n.length - 1; i++) {
        str = n[i];
        if (o[str] === void 0) {
          o[str] = {};
        } else if (typeof o[str] !== "object") {
          throw new Error("Invalid namespace chain in the property name '" + key + "' ('" + str + "' has already a value)");
        }
        o = o[str];
      }
      o[n[n.length - 1]] = value;
    };
    var namespaceSection = function(o, section) {
      var n = section.split(".");
      var str;
      for (var i = 0; i < n.length; i++) {
        str = n[i];
        if (o[str] === void 0) {
          o[str] = {};
        } else if (typeof o[str] !== "object") {
          throw new Error("Invalid namespace chain in the section name '" + section + "' ('" + str + "' has already a value)");
        }
        o = o[str];
      }
      return o;
    };
    var merge = function(o1, o2) {
      for (var p in o2) {
        try {
          if (o1[p].constructor === Object) {
            o1[p] = merge(o1[p], o2[p]);
          } else {
            o1[p] = o2[p];
          }
        } catch (e) {
          o1[p] = o2[p];
        }
      }
      return o1;
    };
    var build = function(data, options, dirname, cb) {
      var o = {};
      if (options.namespaces) {
        var n = {};
      }
      var control = {
        abort: false,
        skipSection: false
      };
      if (options.include) {
        var remainingIncluded = 0;
        var include = function(value) {
          if (currentSection !== null) {
            return abort(new Error("Cannot include files from inside a section: " + currentSection));
          }
          var p = path.resolve(dirname, value);
          if (options._included[p])
            return;
          options._included[p] = true;
          remainingIncluded++;
          control.pause = true;
          read(p, options, function(error2, included) {
            if (error2)
              return abort(error2);
            remainingIncluded--;
            merge(options.namespaces ? n : o, included);
            control.pause = false;
            if (!control.parsed) {
              parse(data, options, handlers, control);
              if (control.error)
                return abort(control.error);
            }
            if (!remainingIncluded)
              cb(null, options.namespaces ? n : o);
          });
        };
      }
      if (!data) {
        if (cb)
          return cb(null, o);
        return o;
      }
      var currentSection = null;
      var currentSectionStr = null;
      var abort = function(error2) {
        control.abort = true;
        if (cb)
          return cb(error2);
        throw error2;
      };
      var handlers = {};
      var reviver = {
        assert: function() {
          return this.isProperty ? reviverLine.value : true;
        }
      };
      var reviverLine = {};
      var line;
      var error;
      if (options.reviver) {
        if (options.sections) {
          line = function(key, value) {
            if (options.include && key === INCLUDE_KEY)
              return include(value);
            reviverLine.value = value;
            reviver.isProperty = true;
            reviver.isSection = false;
            value = options.reviver.call(reviver, key, value, currentSectionStr);
            if (value !== void 0) {
              if (options.namespaces) {
                try {
                  namespaceKey(
                    currentSection === null ? n : currentSection,
                    key,
                    value
                  );
                } catch (error2) {
                  abort(error2);
                }
              } else {
                if (currentSection === null)
                  o[key] = value;
                else
                  currentSection[key] = value;
              }
            }
          };
        } else {
          line = function(key, value) {
            if (options.include && key === INCLUDE_KEY)
              return include(value);
            reviverLine.value = value;
            reviver.isProperty = true;
            reviver.isSection = false;
            value = options.reviver.call(reviver, key, value);
            if (value !== void 0) {
              if (options.namespaces) {
                try {
                  namespaceKey(n, key, value);
                } catch (error2) {
                  abort(error2);
                }
              } else {
                o[key] = value;
              }
            }
          };
        }
      } else {
        if (options.sections) {
          line = function(key, value) {
            if (options.include && key === INCLUDE_KEY)
              return include(value);
            if (options.namespaces) {
              try {
                namespaceKey(
                  currentSection === null ? n : currentSection,
                  key,
                  value
                );
              } catch (error2) {
                abort(error2);
              }
            } else {
              if (currentSection === null)
                o[key] = value;
              else
                currentSection[key] = value;
            }
          };
        } else {
          line = function(key, value) {
            if (options.include && key === INCLUDE_KEY)
              return include(value);
            if (options.namespaces) {
              try {
                namespaceKey(n, key, value);
              } catch (error2) {
                abort(error2);
              }
            } else {
              o[key] = value;
            }
          };
        }
      }
      var section;
      if (options.sections) {
        if (options.reviver) {
          section = function(section2) {
            currentSectionStr = section2;
            reviverLine.section = section2;
            reviver.isProperty = false;
            reviver.isSection = true;
            var add = options.reviver.call(reviver, null, null, section2);
            if (add) {
              if (options.namespaces) {
                try {
                  currentSection = namespaceSection(n, section2);
                } catch (error2) {
                  abort(error2);
                }
              } else {
                currentSection = o[section2] = {};
              }
            } else {
              control.skipSection = true;
            }
          };
        } else {
          section = function(section2) {
            currentSectionStr = section2;
            if (options.namespaces) {
              try {
                currentSection = namespaceSection(n, section2);
              } catch (error2) {
                abort(error2);
              }
            } else {
              currentSection = o[section2] = {};
            }
          };
        }
      }
      if (options.variables) {
        handlers.line = function(key, value) {
          expand(options.namespaces ? n : o, key, options, function(error2, key2) {
            if (error2)
              return abort(error2);
            expand(
              options.namespaces ? n : o,
              value,
              options,
              function(error3, value2) {
                if (error3)
                  return abort(error3);
                line(key2, cast(value2 || null));
              }
            );
          });
        };
        if (options.sections) {
          handlers.section = function(s) {
            expand(options.namespaces ? n : o, s, options, function(error2, s2) {
              if (error2)
                return abort(error2);
              section(s2);
            });
          };
        }
      } else {
        handlers.line = function(key, value) {
          line(key, cast(value || null));
        };
        if (options.sections) {
          handlers.section = section;
        }
      }
      parse(data, options, handlers, control);
      if (control.error)
        return abort(control.error);
      if (control.abort || control.pause)
        return;
      if (cb)
        return cb(null, options.namespaces ? n : o);
      return options.namespaces ? n : o;
    };
    var read = function(f, options, cb) {
      fs.stat(f, function(error, stats) {
        if (error)
          return cb(error);
        var dirname;
        if (stats.isDirectory()) {
          dirname = f;
          f = path.join(f, INDEX_FILE);
        } else {
          dirname = path.dirname(f);
        }
        fs.readFile(f, { encoding: "utf8" }, function(error2, data) {
          if (error2)
            return cb(error2);
          build(data, options, dirname, cb);
        });
      });
    };
    module2.exports = function(data, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      options = options || {};
      var code;
      if (options.include) {
        if (!cb)
          throw new Error("A callback must be passed if the 'include' option is enabled");
        options._included = {};
      }
      options = options || {};
      options._strict = options.strict && (options.comments || options.separators);
      options._vars = options.vars || {};
      var comments = options.comments || [];
      if (!Array.isArray(comments))
        comments = [comments];
      var c = {};
      comments.forEach(function(comment) {
        code = comment.charCodeAt(0);
        if (comment.length > 1 || code < 33 || code > 126) {
          throw new Error("The comment token must be a single printable ASCII character");
        }
        c[comment] = true;
      });
      options._comments = c;
      var separators = options.separators || [];
      if (!Array.isArray(separators))
        separators = [separators];
      var s = {};
      separators.forEach(function(separator) {
        code = separator.charCodeAt(0);
        if (separator.length > 1 || code < 33 || code > 126) {
          throw new Error("The separator token must be a single printable ASCII character");
        }
        s[separator] = true;
      });
      options._separators = s;
      if (options.path) {
        if (!cb)
          throw new Error("A callback must be passed if the 'path' option is enabled");
        if (options.include) {
          read(data, options, cb);
        } else {
          fs.readFile(data, { encoding: "utf8" }, function(error, data2) {
            if (error)
              return cb(error);
            build(data2, options, ".", cb);
          });
        }
      } else {
        return build(data, options, ".", cb);
      }
    };
  }
});

// ../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/escape.js
var require_escape = __commonJS({
  "../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/escape.js"(exports2, module2) {
    "use strict";
    var unicode = function(code) {
      var unicode2 = code.toString(16);
      while (unicode2.length !== 4) {
        unicode2 = "0" + unicode2;
      }
      return "\\u" + unicode2;
    };
    module2.exports = function(c, code, meta, options) {
      if (meta.key && (code === 61 || code === 58 || code === meta.separator)) {
        return "\\" + c;
      }
      if (code > 31 && code < 127) {
        if (code === 32 && meta.whitespace) {
          return "\\ ";
        }
        if (code === 92)
          return "\\\\";
        return c;
      }
      if (code === 9)
        return meta.comment ? c : "\\t";
      if (code === 10)
        return "\\n";
      if (code === 12)
        return meta.comment ? c : "\\f";
      if (code === 13)
        return meta.comment ? c : "\\r";
      if (code < 160)
        return unicode(code);
      if (code < 256)
        return c;
      return options.unicode ? unicode(code) : c;
    };
  }
});

// ../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/stringify.js
var require_stringify = __commonJS({
  "../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/stringify.js"(exports2, module2) {
    "use strict";
    var escape = require_escape();
    var Stringifier = require_stringifier();
    var EOL = process.platform === "win32" ? "\r\n" : "\n";
    var stringifyComment = function(comment, meta, options) {
      var c;
      var code;
      var str = options._comment;
      for (var i = 0; i < comment.length; i++) {
        c = comment[i];
        code = comment.charCodeAt(i);
        if (code === 13)
          continue;
        if (code === 10) {
          str += EOL + options._comment;
        } else {
          str += escape(c, code, meta, options);
        }
      }
      return str;
    };
    var stringifyKey = function(s, meta, options) {
      var c;
      var code;
      var str = "";
      for (var i = 0; i < s.length; i++) {
        c = s[i];
        code = s.charCodeAt(i);
        str += escape(c, code, meta, options);
      }
      return str;
    };
    var stringifyValue = function(s, meta, options) {
      var c;
      var code;
      var str = "";
      for (var i = 0; i < s.length; i++) {
        c = s[i];
        code = s.charCodeAt(i);
        if (code !== 32 && code !== 9 && code !== 12) {
          meta.whitespace = false;
        }
        str += escape(c, code, meta, options);
      }
      return str;
    };
    var stringifyObject = function(obj, options) {
      var str = "";
      var meta = {
        separator: options._separator.charCodeAt(0)
      };
      var value;
      var first = true;
      if (options.replacer) {
        var o = {
          assert: function() {
            return replace.property ? replace.value : true;
          },
          isProperty: true,
          isSection: false
        };
      }
      for (var p in obj) {
        value = obj[p];
        if (options.replacer) {
          value = options.replacer.call(o, p, value, null);
          if (value === void 0)
            continue;
        }
        if (!first)
          str += EOL;
        meta.whitespace = true;
        meta.key = true;
        str += stringifyKey(p, meta, options);
        meta.key = false;
        str += options._separator;
        if (value !== null && value !== void 0) {
          str += stringifyValue(value + "", meta, options);
        }
        meta.whitespace = false;
        first = false;
      }
      return str;
    };
    var stringifyStringifier = function(stringifier, options) {
      var str = "";
      var meta = {
        separator: options._separator.charCodeAt(0)
      };
      var first = true;
      var currentSection = null;
      var skipSection;
      var value;
      var replace2;
      if (options.replacer) {
        var o = {
          assert: function() {
            return replace2.property ? replace2.value : true;
          }
        };
      }
      if (stringifier._header) {
        meta.comment = true;
        str += stringifyComment(stringifier._header, meta, options) + EOL + EOL;
        meta.comment = false;
      }
      stringifier._lines.forEach(function(line) {
        replace2 = line;
        if (options.replacer) {
          if (line.property) {
            if (skipSection)
              return;
            o.isProperty = true;
            o.isSection = false;
            value = options.replacer.call(o, line.key, line.value, currentSection);
            if (value === void 0)
              return;
            line.value = value;
          } else {
            skipSection = false;
            o.isProperty = false;
            o.isSection = true;
            if (options.replacer.call(o, null, null, line.name)) {
              currentSection = line.name;
            } else {
              skipSection = true;
              return;
            }
          }
        }
        if (!first)
          str += line.property ? EOL : EOL + EOL;
        if (line.comment) {
          meta.comment = true;
          str += stringifyComment(line.comment, meta, options) + EOL;
          meta.comment = false;
        }
        if (line.property) {
          meta.whitespace = true;
          if (line.key !== null && line.key !== void 0) {
            meta.key = true;
            str += stringifyKey(line.key + "", meta, options);
            meta.key = false;
          }
          str += options._separator;
          if (line.value !== null && line.value !== void 0) {
            str += stringifyValue(line.value + "", meta, options);
          }
          meta.whitespace = false;
        } else {
          if (line.name) {
            str += "[" + stringifyKey(line.name + "", meta, options) + "]";
          } else {
            str += "[]";
          }
        }
        first = false;
      });
      return str;
    };
    module2.exports = function(stringifier, options) {
      if (!(stringifier instanceof Stringifier)) {
        return stringifyObject(stringifier, options);
      } else {
        return stringifyStringifier(stringifier, options);
      }
    };
  }
});

// ../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/write.js
var require_write = __commonJS({
  "../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/write.js"(exports2, module2) {
    "use strict";
    var fs = require("fs");
    var stringify = require_stringify();
    module2.exports = function(stringifier, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      options = options || {};
      var code;
      if (options.comment) {
        code = options.comment.charCodeAt(0);
        if (options.comment.length > 1 || code < 33 || code > 126) {
          throw new Error("The comment token must be a single printable ASCII character");
        }
        options._comment = options.comment;
      } else {
        options._comment = "#";
      }
      options._comment += " ";
      if (options.separator) {
        code = options.separator.charCodeAt(0);
        if (options.separator.length > 1 || code < 33 || code > 126) {
          throw new Error("The separator token must be a single printable ASCII character");
        }
        options._separator = options.separator;
      } else {
        options._separator = "=";
      }
      options._separator = " " + options._separator + " ";
      var data = stringify(stringifier, options);
      if (options.path) {
        if (!cb)
          throw new TypeError("A callback must be passed if the data is stored into a file");
        fs.writeFile(options.path, data, function(error) {
          if (error)
            return cb(error);
          cb(null, data);
        });
      } else {
        return data;
      }
    };
  }
});

// ../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/index.js
var require_lib = __commonJS({
  "../../.yarn/cache/properties-npm-1.2.1-f3483bd75a-f385f8b969.zip/node_modules/properties/lib/index.js"(exports2, module2) {
    "use strict";
    var Stringifier = require_stringifier();
    module2.exports = {
      parse: require_read(),
      stringify: require_write(),
      createStringifier: function() {
        return new Stringifier();
      }
    };
  }
});

// ../allure-js-commons/dist/src/writers/FileSystemAllureWriter.js
var require_FileSystemAllureWriter = __commonJS({
  "../allure-js-commons/dist/src/writers/FileSystemAllureWriter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileSystemAllureWriter = void 0;
    var fs_1 = require("fs");
    var path_1 = require("path");
    var properties_1 = require_lib();
    var writeJson = (path, data) => {
      (0, fs_1.writeFileSync)(path, JSON.stringify(data), { encoding: "utf-8" });
    };
    var FileSystemAllureWriter = class {
      constructor(config) {
        this.config = config;
        if (!(0, fs_1.existsSync)(this.config.resultsDir)) {
          (0, fs_1.mkdirSync)(this.config.resultsDir, {
            recursive: true
          });
        }
      }
      writeAttachment(name, content, encoding = "utf-8") {
        const path = this.buildPath(name);
        (0, fs_1.writeFileSync)(path, content, { encoding });
      }
      writeAttachmentFromPath(from, distFileName) {
        const to = this.buildPath(distFileName);
        (0, fs_1.copyFileSync)(from, to);
      }
      writeEnvironmentInfo(info) {
        const text = (0, properties_1.stringify)(info, { unicode: true }).toString();
        const path = this.buildPath("environment.properties");
        (0, fs_1.writeFileSync)(path, text);
      }
      writeCategoriesDefinitions(categories) {
        const path = this.buildPath("categories.json");
        writeJson(path, categories);
      }
      writeGroup(result) {
        const path = this.buildPath(`${result.uuid}-container.json`);
        writeJson(path, result);
      }
      writeResult(result) {
        const path = this.buildPath(`${result.uuid}-result.json`);
        writeJson(path, result);
      }
      buildPath(name) {
        return (0, path_1.join)(this.config.resultsDir, name);
      }
    };
    exports2.FileSystemAllureWriter = FileSystemAllureWriter;
  }
});

// ../allure-js-commons/dist/src/writers/InMemoryAllureWriter.js
var require_InMemoryAllureWriter = __commonJS({
  "../allure-js-commons/dist/src/writers/InMemoryAllureWriter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InMemoryAllureWriter = void 0;
    var fs_1 = require("fs");
    var InMemoryAllureWriter = class {
      constructor() {
        this.groups = [];
        this.tests = [];
        this.attachments = {};
      }
      writeGroup(result) {
        this.groups.push(result);
      }
      writeResult(result) {
        this.tests.push(result);
      }
      writeAttachment(name, content) {
        this.attachments[name] = content;
      }
      writeAttachmentFromPath(from, toFileName) {
        this.attachments[toFileName] = (0, fs_1.readFileSync)(from);
      }
      writeCategoriesDefinitions(categories) {
        if (this.categories) {
          console.warn("overwriting existing categories");
        }
        this.categories = categories;
      }
      writeEnvironmentInfo(envInfo) {
        if (this.envInfo) {
          console.warn("overwriting existing environment info");
        }
        this.envInfo = envInfo;
      }
      reset() {
        this.groups = [];
        this.tests = [];
        this.attachments = {};
      }
      getMaybeTestByName(name) {
        return this.tests.find((t) => t.name === name);
      }
      getTestByName(name) {
        const res = this.getMaybeTestByName(name);
        if (!res) {
          throw new Error(`Test not found: ${name}`);
        }
        return res;
      }
      getMaybeGroupByName(name) {
        return this.groups.find((g) => g.name === name);
      }
      getGroupByName(name) {
        const res = this.getMaybeGroupByName(name);
        if (!res) {
          throw new Error(`Group not found: ${name}`);
        }
        return res;
      }
    };
    exports2.InMemoryAllureWriter = InMemoryAllureWriter;
  }
});

// ../allure-js-commons/dist/src/writers/MessageAllureWriter.js
var require_MessageAllureWriter = __commonJS({
  "../allure-js-commons/dist/src/writers/MessageAllureWriter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessageAllureWriter = void 0;
    var fs_1 = require("fs");
    var properties_1 = require_lib();
    var sendEvent = (event) => {
      var _a;
      (_a = process.send) === null || _a === void 0 ? void 0 : _a.call(process, JSON.stringify(event));
    };
    var sendData = (path, type, data) => {
      sendEvent({ path, type, data: data.toString("base64") });
    };
    var writeJson = (path, type, data) => {
      sendData(path, type, Buffer.from(JSON.stringify(data)));
    };
    var MessageAllureWriter = class {
      writeAttachment(name, content, encoding = "utf-8") {
        sendData(name, "attachment", typeof content === "string" ? Buffer.from(content, encoding) : content);
      }
      writeAttachmentFromPath(from, distFileName) {
        sendData(distFileName, "attachment", (0, fs_1.readFileSync)(from));
      }
      writeEnvironmentInfo(info) {
        const text = (0, properties_1.stringify)(info, { unicode: true }).toString();
        sendData("environment.properties", "misc", Buffer.from(text));
      }
      writeCategoriesDefinitions(categories) {
        writeJson("categories.json", "misc", categories);
      }
      writeGroup(result) {
        writeJson(`${result.uuid}-container.json`, "container", result);
      }
      writeResult(result) {
        writeJson(`${result.uuid}-result.json`, "result", result);
      }
    };
    exports2.MessageAllureWriter = MessageAllureWriter;
  }
});

// ../allure-js-commons/dist/src/writers/utils.js
var require_utils2 = __commonJS({
  "../allure-js-commons/dist/src/writers/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.typeToExtension = void 0;
    var extensionsByType = {
      "application/andrew-inset": ".ez",
      "application/applixware": ".aw",
      "application/atom+xml": ".atom",
      "application/atomcat+xml": ".atomcat",
      "application/atomsvc+xml": ".atomsvc",
      "application/bizagi-modeler": ".bpm",
      "application/cbor": ".cbor",
      "application/ccxml+xml": ".ccxml",
      "application/coreldraw": ".cdr",
      "application/cu-seeme": ".cu",
      "application/dash+xml": ".mpd",
      "application/davmount+xml": ".davmount",
      "application/dif+xml": ".dif",
      "application/dita+xml; format=map": ".ditamap",
      "application/dita+xml; format=topic": ".dita",
      "application/dita+xml; format=val": ".ditaval",
      "application/ecmascript": ".ecma",
      "application/emma+xml": ".emma",
      "application/envi.hdr": ".hdr",
      "application/epub+zip": ".epub",
      "application/fits": ".fits",
      "application/font-tdpfr": ".pfr",
      "application/gzip": ".gz",
      "application/hyperstudio": ".stk",
      "application/illustrator": ".ai",
      "application/java-archive": ".jar",
      "application/java-serialized-object": ".ser",
      "application/java-vm": ".class",
      "application/javascript": ".js",
      "application/json": ".json",
      "application/lost+xml": ".lostxml",
      "application/mac-binhex40": ".hqx",
      "application/mac-compactpro": ".cpt",
      "application/manifest+json": ".webmanifest",
      "application/marc": ".mrc",
      "application/mathematica": ".ma",
      "application/mathml+xml": ".mathml",
      "application/mbox": ".mbox",
      "application/mediaservercontrol+xml": ".mscml",
      "application/mp4": ".mp4s",
      "application/msword": ".doc",
      "application/mxf": ".mxf",
      "application/octet-stream": ".bin",
      "application/oda": ".oda",
      "application/oebps-package+xml": ".opf",
      "application/ogg": ".ogx",
      "application/onenote": ".onetmp",
      "application/onenote; format=one": ".one",
      "application/onenote; format=onetoc2": ".onetoc",
      "application/onenote; format=package": ".onepkg",
      "application/patch-ops-error+xml": ".xer",
      "application/pdf": ".pdf",
      "application/pgp-encrypted": ".pgp",
      "application/pgp-signature": ".asc",
      "application/pics-rules": ".prf",
      "application/pkcs7-mime": ".p7m",
      "application/pkcs7-signature": ".p7s",
      "application/pkcs10": ".p10",
      "application/pkix-cert": ".cer",
      "application/pkix-crl": ".crl",
      "application/pkix-pkipath": ".pkipath",
      "application/pkixcmp": ".pki",
      "application/pls+xml": ".pls",
      "application/postscript": ".ps",
      "application/prs.cww": ".cww",
      "application/rdf+xml": ".rdf",
      "application/reginfo+xml": ".rif",
      "application/relax-ng-compact-syntax": ".rnc",
      "application/resource-lists+xml": ".rl",
      "application/resource-lists-diff+xml": ".rld",
      "application/rls-services+xml": ".rs",
      "application/rsd+xml": ".rsd",
      "application/rss+xml": ".rss",
      "application/rtf": ".rtf",
      "application/sbml+xml": ".sbml",
      "application/scvp-cv-request": ".scq",
      "application/scvp-cv-response": ".scs",
      "application/scvp-vp-request": ".spq",
      "application/scvp-vp-response": ".spp",
      "application/sdp": ".sdp",
      "application/sereal": ".srl",
      "application/set-payment-initiation": ".setpay",
      "application/set-registration-initiation": ".setreg",
      "application/shf+xml": ".shf",
      "application/sldworks": ".sldprt",
      "application/smil+xml": ".smi",
      "application/sparql-query": ".rq",
      "application/sparql-results+xml": ".srx",
      "application/srgs": ".gram",
      "application/srgs+xml": ".grxml",
      "application/ssml+xml": ".ssml",
      "application/timestamped-data": ".tsd",
      "application/vnd.3gpp.pic-bw-large": ".plb",
      "application/vnd.3gpp.pic-bw-small": ".psb",
      "application/vnd.3gpp.pic-bw-var": ".pvb",
      "application/vnd.3gpp2.tcap": ".tcap",
      "application/vnd.3m.post-it-notes": ".pwn",
      "application/vnd.accpac.simply.aso": ".aso",
      "application/vnd.accpac.simply.imp": ".imp",
      "application/vnd.acucobol": ".acu",
      "application/vnd.acucorp": ".atc",
      "application/vnd.adobe.aftereffects.project": ".aep",
      "application/vnd.adobe.aftereffects.template": ".aet",
      "application/vnd.adobe.air-application-installer-package+zip": ".air",
      "application/vnd.adobe.indesign-idml-package": ".idml",
      "application/vnd.adobe.xdp+xml": ".xdp",
      "application/vnd.adobe.xfdf": ".xfdf",
      "application/vnd.airzip.filesecure.azf": ".azf",
      "application/vnd.airzip.filesecure.azs": ".azs",
      "application/vnd.allure.image.diff": ".imagediff",
      "application/vnd.allure.metadata+json": ".metadata",
      "application/vnd.amazon.ebook": ".azw",
      "application/vnd.americandynamics.acc": ".acc",
      "application/vnd.amiga.ami": ".ami",
      "application/vnd.android.package-archive": ".apk",
      "application/vnd.anser-web-certificate-issue-initiation": ".cii",
      "application/vnd.anser-web-funds-transfer-initiation": ".fti",
      "application/vnd.antix.game-component": ".atx",
      "application/vnd.apple.installer+xml": ".mpkg",
      "application/vnd.apple.keynote": ".key",
      "application/vnd.apple.mpegurl": ".m3u8",
      "application/vnd.apple.numbers": ".numbers",
      "application/vnd.apple.pages": ".pages",
      "application/vnd.arastra.swi": ".swi",
      "application/vnd.blueice.multipass": ".mpm",
      "application/vnd.bmi": ".bmi",
      "application/vnd.businessobjects": ".rep",
      "application/vnd.chemdraw+xml": ".cdxml",
      "application/vnd.chipnuts.karaoke-mmd": ".mmd",
      "application/vnd.cinderella": ".cdy",
      "application/vnd.claymore": ".cla",
      "application/vnd.clonk.c4group": ".c4g",
      "application/vnd.commonspace": ".csp",
      "application/vnd.contact.cmsg": ".cdbcmsg",
      "application/vnd.cosmocaller": ".cmc",
      "application/vnd.crick.clicker": ".clkx",
      "application/vnd.crick.clicker.keyboard": ".clkk",
      "application/vnd.crick.clicker.palette": ".clkp",
      "application/vnd.crick.clicker.template": ".clkt",
      "application/vnd.crick.clicker.wordbank": ".clkw",
      "application/vnd.criticaltools.wbs+xml": ".wbs",
      "application/vnd.ctc-posml": ".pml",
      "application/vnd.cups-ppd": ".ppd",
      "application/vnd.curl.car": ".car",
      "application/vnd.curl.pcurl": ".pcurl",
      "application/vnd.data-vision.rdz": ".rdz",
      "application/vnd.denovo.fcselayout-link": ".fe_launch",
      "application/vnd.dna": ".dna",
      "application/vnd.dolby.mlp": ".mlp",
      "application/vnd.dpgraph": ".dpg",
      "application/vnd.dreamfactory": ".dfac",
      "application/vnd.dynageo": ".geo",
      "application/vnd.ecowin.chart": ".mag",
      "application/vnd.enliven": ".nml",
      "application/vnd.epson.esf": ".esf",
      "application/vnd.epson.msf": ".msf",
      "application/vnd.epson.quickanime": ".qam",
      "application/vnd.epson.salt": ".slt",
      "application/vnd.epson.ssf": ".ssf",
      "application/vnd.eszigno3+xml": ".es3",
      "application/vnd.etsi.asic-e+zip": ".asice",
      "application/vnd.etsi.asic-s+zip": ".asics",
      "application/vnd.ezpix-album": ".ez2",
      "application/vnd.ezpix-package": ".ez3",
      "application/vnd.fdf": ".fdf",
      "application/vnd.fdsn.mseed": ".mseed",
      "application/vnd.fdsn.seed": ".seed",
      "application/vnd.flographit": ".gph",
      "application/vnd.fluxtime.clip": ".ftc",
      "application/vnd.framemaker": ".fm",
      "application/vnd.frogans.fnc": ".fnc",
      "application/vnd.frogans.ltf": ".ltf",
      "application/vnd.fsc.weblaunch": ".fsc",
      "application/vnd.fujitsu.oasys": ".oas",
      "application/vnd.fujitsu.oasys2": ".oa2",
      "application/vnd.fujitsu.oasys3": ".oa3",
      "application/vnd.fujitsu.oasysgp": ".fg5",
      "application/vnd.fujitsu.oasysprs": ".bh2",
      "application/vnd.fujixerox.ddd": ".ddd",
      "application/vnd.fujixerox.docuworks": ".xdw",
      "application/vnd.fujixerox.docuworks.binder": ".xbd",
      "application/vnd.fuzzysheet": ".fzs",
      "application/vnd.genomatix.tuxedo": ".txd",
      "application/vnd.geogebra.file": ".ggb",
      "application/vnd.geogebra.tool": ".ggt",
      "application/vnd.geometry-explorer": ".gex",
      "application/vnd.gmx": ".gmx",
      "application/vnd.google-earth.kml+xml": ".kml",
      "application/vnd.google-earth.kmz": ".kmz",
      "application/vnd.grafeq": ".gqf",
      "application/vnd.groove-account": ".gac",
      "application/vnd.groove-help": ".ghf",
      "application/vnd.groove-identity-message": ".gim",
      "application/vnd.groove-injector": ".grv",
      "application/vnd.groove-tool-message": ".gtm",
      "application/vnd.groove-tool-template": ".tpl",
      "application/vnd.groove-vcard": ".vcg",
      "application/vnd.handheld-entertainment+xml": ".zmm",
      "application/vnd.hbci": ".hbci",
      "application/vnd.hhe.lesson-player": ".les",
      "application/vnd.hp-hpgl": ".hpgl",
      "application/vnd.hp-hpid": ".hpid",
      "application/vnd.hp-hps": ".hps",
      "application/vnd.hp-jlyt": ".jlt",
      "application/vnd.hp-pcl": ".pcl",
      "application/vnd.hp-pclxl": ".pclxl",
      "application/vnd.hydrostatix.sof-data": ".sfd-hdstx",
      "application/vnd.hzn-3d-crossword": ".x3d",
      "application/vnd.ibm.minipay": ".mpy",
      "application/vnd.ibm.modcap": ".afp",
      "application/vnd.ibm.rights-management": ".irm",
      "application/vnd.ibm.secure-container": ".sc",
      "application/vnd.iccprofile": ".icc",
      "application/vnd.igloader": ".igl",
      "application/vnd.immervision-ivp": ".ivp",
      "application/vnd.immervision-ivu": ".ivu",
      "application/vnd.intercon.formnet": ".xpw",
      "application/vnd.intu.qbo": ".qbo",
      "application/vnd.intu.qfx": ".qfx",
      "application/vnd.iptc.g2.newsmessage+xml": ".nar",
      "application/vnd.ipunplugged.rcprofile": ".rcprofile",
      "application/vnd.irepository.package+xml": ".irp",
      "application/vnd.is-xpr": ".xpr",
      "application/vnd.jam": ".jam",
      "application/vnd.java.hprof": ".hprof",
      "application/vnd.java.hprof.text": ".hprof.txt",
      "application/vnd.jcp.javame.midlet-rms": ".rms",
      "application/vnd.jisp": ".jisp",
      "application/vnd.joost.joda-archive": ".joda",
      "application/vnd.kahootz": ".ktz",
      "application/vnd.kde.karbon": ".karbon",
      "application/vnd.kde.kchart": ".chrt",
      "application/vnd.kde.kformula": ".kfo",
      "application/vnd.kde.kivio": ".flw",
      "application/vnd.kde.kontour": ".kon",
      "application/vnd.kde.kpresenter": ".kpr",
      "application/vnd.kde.kspread": ".ksp",
      "application/vnd.kde.kword": ".kwd",
      "application/vnd.kenameaapp": ".htke",
      "application/vnd.kidspiration": ".kia",
      "application/vnd.kinar": ".kne",
      "application/vnd.koan": ".skp",
      "application/vnd.kodak-descriptor": ".sse",
      "application/vnd.llamagraphics.life-balance.desktop": ".lbd",
      "application/vnd.llamagraphics.life-balance.exchange+xml": ".lbe",
      "application/vnd.lotus-1-2-3": ".wk1",
      "application/vnd.lotus-1-2-3; version=2": ".wk1",
      "application/vnd.lotus-1-2-3; version=3": ".wk3",
      "application/vnd.lotus-1-2-3; version=4": ".wk4",
      "application/vnd.lotus-1-2-3; version=97+9.x": ".123",
      "application/vnd.lotus-approach": ".apr",
      "application/vnd.lotus-freelance": ".pre",
      "application/vnd.lotus-notes": ".nsf",
      "application/vnd.lotus-organizer": ".org",
      "application/vnd.lotus-wordpro": ".lwp",
      "application/vnd.macports.portpkg": ".portpkg",
      "application/vnd.mcd": ".mcd",
      "application/vnd.medcalcdata": ".mc1",
      "application/vnd.mediastation.cdkey": ".cdkey",
      "application/vnd.mfer": ".mwf",
      "application/vnd.mfmp": ".mfm",
      "application/vnd.micrografx.flo": ".flo",
      "application/vnd.micrografx.igx": ".igx",
      "application/vnd.mif": ".mif",
      "application/vnd.mindjet.mindmanager": ".mmp",
      "application/vnd.mobius.daf": ".daf",
      "application/vnd.mobius.dis": ".dis",
      "application/vnd.mobius.mbk": ".mbk",
      "application/vnd.mobius.mqy": ".mqy",
      "application/vnd.mobius.msl": ".msl",
      "application/vnd.mobius.plc": ".plc",
      "application/vnd.mobius.txf": ".txf",
      "application/vnd.mophun.application": ".mpn",
      "application/vnd.mophun.certificate": ".mpc",
      "application/vnd.mozilla.xul+xml": ".xul",
      "application/vnd.ms-artgalry": ".cil",
      "application/vnd.ms-cab-compressed": ".cab",
      "application/vnd.ms-excel": ".xls",
      "application/vnd.ms-excel.addin.macroenabled.12": ".xlam",
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": ".xlsb",
      "application/vnd.ms-excel.sheet.macroenabled.12": ".xlsm",
      "application/vnd.ms-excel.template.macroenabled.12": ".xltm",
      "application/vnd.ms-fontobject": ".eot",
      "application/vnd.ms-htmlhelp": ".chm",
      "application/vnd.ms-ims": ".ims",
      "application/vnd.ms-lrm": ".lrm",
      "application/vnd.ms-outlook": ".msg",
      "application/vnd.ms-outlook-pst": ".pst",
      "application/vnd.ms-pki.seccat": ".cat",
      "application/vnd.ms-pki.stl": ".stl",
      "application/vnd.ms-powerpoint": ".ppt",
      "application/vnd.ms-powerpoint.addin.macroenabled.12": ".ppam",
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": ".pptm",
      "application/vnd.ms-powerpoint.slide.macroenabled.12": ".sldm",
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ".ppsm",
      "application/vnd.ms-powerpoint.template.macroenabled.12": ".potm",
      "application/vnd.ms-project": ".mpp",
      "application/vnd.ms-visio.drawing": ".vsdx",
      "application/vnd.ms-visio.drawing.macroenabled.12": ".vsdm",
      "application/vnd.ms-visio.stencil": ".vssx",
      "application/vnd.ms-visio.stencil.macroenabled.12": ".vssm",
      "application/vnd.ms-visio.template": ".vstx",
      "application/vnd.ms-visio.template.macroenabled.12": ".vstm",
      "application/vnd.ms-word.document.macroenabled.12": ".docm",
      "application/vnd.ms-word.template.macroenabled.12": ".dotm",
      "application/vnd.ms-works": ".wps",
      "application/vnd.ms-wpl": ".wpl",
      "application/vnd.ms-xpsdocument": ".xps",
      "application/vnd.mseq": ".mseq",
      "application/vnd.musician": ".mus",
      "application/vnd.muvee.style": ".msty",
      "application/vnd.neurolanguage.nlu": ".nlu",
      "application/vnd.noblenet-directory": ".nnd",
      "application/vnd.noblenet-sealer": ".nns",
      "application/vnd.noblenet-web": ".nnw",
      "application/vnd.nokia.n-gage.data": ".ngdat",
      "application/vnd.nokia.n-gage.symbian.install": ".n-gage",
      "application/vnd.nokia.radio-preset": ".rpst",
      "application/vnd.nokia.radio-presets": ".rpss",
      "application/vnd.novadigm.edm": ".edm",
      "application/vnd.novadigm.edx": ".edx",
      "application/vnd.novadigm.ext": ".ext",
      "application/vnd.oasis.opendocument.base": ".odb",
      "application/vnd.oasis.opendocument.chart": ".odc",
      "application/vnd.oasis.opendocument.chart-template": ".otc",
      "application/vnd.oasis.opendocument.flat.presentation": ".fodp",
      "application/vnd.oasis.opendocument.flat.spreadsheet": ".fods",
      "application/vnd.oasis.opendocument.flat.text": ".fodt",
      "application/vnd.oasis.opendocument.formula": ".odf",
      "application/vnd.oasis.opendocument.formula-template": ".odft",
      "application/vnd.oasis.opendocument.graphics": ".odg",
      "application/vnd.oasis.opendocument.graphics-template": ".otg",
      "application/vnd.oasis.opendocument.image": ".odi",
      "application/vnd.oasis.opendocument.image-template": ".oti",
      "application/vnd.oasis.opendocument.presentation": ".odp",
      "application/vnd.oasis.opendocument.presentation-template": ".otp",
      "application/vnd.oasis.opendocument.spreadsheet": ".ods",
      "application/vnd.oasis.opendocument.spreadsheet-template": ".ots",
      "application/vnd.oasis.opendocument.text": ".odt",
      "application/vnd.oasis.opendocument.text-master": ".otm",
      "application/vnd.oasis.opendocument.text-template": ".ott",
      "application/vnd.oasis.opendocument.text-web": ".oth",
      "application/vnd.olpc-sugar": ".xo",
      "application/vnd.oma.dd2+xml": ".dd2",
      "application/vnd.openofficeorg.autotext": ".bau",
      "application/vnd.openofficeorg.extension": ".oxt",
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": ".pptx",
      "application/vnd.openxmlformats-officedocument.presentationml.slide": ".sldx",
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ".ppsx",
      "application/vnd.openxmlformats-officedocument.presentationml.template": ".potx",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ".xlsx",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ".xltx",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ".docx",
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ".dotx",
      "application/vnd.osgi.dp": ".dp",
      "application/vnd.palm": ".pqa",
      "application/vnd.pg.format": ".str",
      "application/vnd.pg.osasli": ".ei6",
      "application/vnd.picsel": ".efif",
      "application/vnd.pocketlearn": ".plf",
      "application/vnd.powerbuilder6": ".pbd",
      "application/vnd.previewsystems.box": ".box",
      "application/vnd.proteus.magazine": ".mgz",
      "application/vnd.publishare-delta-tree": ".qps",
      "application/vnd.pvi.ptid1": ".ptid",
      "application/vnd.quark.quarkxpress": ".qxd",
      "application/vnd.recordare.musicxml": ".mxl",
      "application/vnd.recordare.musicxml+xml": ".musicxml",
      "application/vnd.rim.cod": ".cod",
      "application/vnd.rn-realmedia": ".rm",
      "application/vnd.route66.link66+xml": ".link66",
      "application/vnd.seemail": ".see",
      "application/vnd.sema": ".sema",
      "application/vnd.semd": ".semd",
      "application/vnd.semf": ".semf",
      "application/vnd.shana.informed.formdata": ".ifm",
      "application/vnd.shana.informed.formtemplate": ".itp",
      "application/vnd.shana.informed.interchange": ".iif",
      "application/vnd.shana.informed.package": ".ipk",
      "application/vnd.simtech-mindmapper": ".twd",
      "application/vnd.smaf": ".mmf",
      "application/vnd.smart.teacher": ".teacher",
      "application/vnd.solent.sdkm+xml": ".sdkm",
      "application/vnd.spotfire.dxp": ".dxp",
      "application/vnd.spotfire.sfs": ".sfs",
      "application/vnd.stardivision.calc": ".sdc",
      "application/vnd.stardivision.draw": ".sda",
      "application/vnd.stardivision.impress": ".sdd",
      "application/vnd.stardivision.math": ".smf",
      "application/vnd.stardivision.writer": ".sdw",
      "application/vnd.stardivision.writer-global": ".sgl",
      "application/vnd.sun.xml.calc": ".sxc",
      "application/vnd.sun.xml.calc.template": ".stc",
      "application/vnd.sun.xml.draw": ".sxd",
      "application/vnd.sun.xml.draw.template": ".std",
      "application/vnd.sun.xml.impress": ".sxi",
      "application/vnd.sun.xml.impress.template": ".sti",
      "application/vnd.sun.xml.math": ".sxm",
      "application/vnd.sun.xml.writer": ".sxw",
      "application/vnd.sun.xml.writer.global": ".sxg",
      "application/vnd.sun.xml.writer.template": ".stw",
      "application/vnd.sus-calendar": ".sus",
      "application/vnd.svd": ".svd",
      "application/vnd.symbian.install": ".sis",
      "application/vnd.syncml+xml": ".xsm",
      "application/vnd.syncml.dm+wbxml": ".bdm",
      "application/vnd.syncml.dm+xml": ".xdm",
      "application/vnd.tao.intent-module-archive": ".tao",
      "application/vnd.tcpdump.pcap": ".pcap",
      "application/vnd.tmobile-livetv": ".tmo",
      "application/vnd.trid.tpt": ".tpt",
      "application/vnd.triscape.mxs": ".mxs",
      "application/vnd.trueapp": ".tra",
      "application/vnd.ufdl": ".ufd",
      "application/vnd.uiq.theme": ".utz",
      "application/vnd.umajin": ".umj",
      "application/vnd.unity": ".unityweb",
      "application/vnd.uoml+xml": ".uoml",
      "application/vnd.vcx": ".vcx",
      "application/vnd.visio": ".vsd",
      "application/vnd.visionary": ".vis",
      "application/vnd.vsf": ".vsf",
      "application/vnd.wap.wbxml": ".wbxml",
      "application/vnd.wap.wmlc": ".wmlc",
      "application/vnd.wap.wmlscriptc": ".wmlsc",
      "application/vnd.webturbo": ".wtb",
      "application/vnd.wolfram.wl": ".wl",
      "application/vnd.wordperfect": ".wpd",
      "application/vnd.wqd": ".wqd",
      "application/vnd.wt.stf": ".stf",
      "application/vnd.xara": ".xar",
      "application/vnd.xfdl": ".xfdl",
      "application/vnd.yamaha.hv-dic": ".hvd",
      "application/vnd.yamaha.hv-script": ".hvs",
      "application/vnd.yamaha.hv-voice": ".hvp",
      "application/vnd.yamaha.openscoreformat": ".osf",
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": ".osfpvg",
      "application/vnd.yamaha.smaf-audio": ".saf",
      "application/vnd.yamaha.smaf-phrase": ".spf",
      "application/vnd.yellowriver-custom-menu": ".cmp",
      "application/vnd.zul": ".zir",
      "application/vnd.zzazz.deck+xml": ".zaz",
      "application/voicexml+xml": ".vxml",
      "application/warc": ".warc",
      "application/wasm": ".wasm",
      "application/winhlp": ".hlp",
      "application/wsdl+xml": ".wsdl",
      "application/wspolicy+xml": ".wspolicy",
      "application/x-7z-compressed": ".7z",
      "application/x-abiword": ".abw",
      "application/x-ace-compressed": ".ace",
      "application/x-adobe-indesign": ".indd",
      "application/x-adobe-indesign-interchange": ".inx",
      "application/x-apple-diskimage": ".dmg",
      "application/x-appleworks": ".cwk",
      "application/x-archive": ".ar",
      "application/x-arj": ".arj",
      "application/x-authorware-bin": ".aab",
      "application/x-authorware-map": ".aam",
      "application/x-authorware-seg": ".aas",
      "application/x-axcrypt": ".axx",
      "application/x-bat": ".bat",
      "application/x-bcpio": ".bcpio",
      "application/x-bibtex-text-file": ".bib",
      "application/x-bittorrent": ".torrent",
      "application/x-brotli": ".br",
      "application/x-bzip": ".bz",
      "application/x-bzip2": ".bz2",
      "application/x-cdlink": ".vcd",
      "application/x-chat": ".chat",
      "application/x-chess-pgn": ".pgn",
      "application/x-chrome-package": ".crx",
      "application/x-compress": ".z",
      "application/x-corelpresentations": ".shw",
      "application/x-cpio": ".cpio",
      "application/x-csh": ".csh",
      "application/x-dbf": ".dbf",
      "application/x-debian-package": ".deb",
      "application/x-dex": ".dex",
      "application/x-director": ".dir",
      "application/x-doom": ".wad",
      "application/x-dosexec": ".exe",
      "application/x-dtbncx+xml": ".ncx",
      "application/x-dtbook+xml": ".dtb",
      "application/x-dtbresource+xml": ".res",
      "application/x-dvi": ".dvi",
      "application/x-elc": ".elc",
      "application/x-endnote-refer": ".enw",
      "application/x-erdas-hfa": ".hfa",
      "application/x-esri-layer": ".lyr",
      "application/x-fictionbook+xml": ".fb2",
      "application/x-filemaker": ".fp7",
      "application/x-font-adobe-metric": ".afm",
      "application/x-font-bdf": ".bdf",
      "application/x-font-ghostscript": ".gsf",
      "application/x-font-linux-psf": ".psf",
      "application/x-font-otf": ".otf",
      "application/x-font-pcf": ".pcf",
      "application/x-font-printer-metric": ".pfm",
      "application/x-font-snf": ".snf",
      "application/x-font-ttf": ".ttf",
      "application/x-font-type1": ".pfa",
      "application/x-futuresplash": ".spl",
      "application/x-gnucash": ".gnucash",
      "application/x-gnumeric": ".gnumeric",
      "application/x-grib": ".grb",
      "application/x-gtar": ".gtar",
      "application/x-hdf": ".hdf",
      "application/x-ibooks+zip": ".ibooks",
      "application/x-internet-archive": ".arc",
      "application/x-iso9660-image": ".iso",
      "application/x-itunes-ipa": ".ipa",
      "application/x-java-jnilib": ".jnilib",
      "application/x-java-jnlp-file": ".jnlp",
      "application/x-java-pack200": ".pack",
      "application/x-killustrator": ".kil",
      "application/x-latex": ".latex",
      "application/x-lz4": ".lz4",
      "application/x-lzip": ".lz",
      "application/x-lzma": ".lzma",
      "application/x-matlab-data": ".mat",
      "application/x-memgraph": ".memgraph",
      "application/x-mobipocket-ebook": ".prc",
      "application/x-ms-application": ".application",
      "application/x-ms-asx": ".asx",
      "application/x-ms-installer": ".msi",
      "application/x-ms-wmd": ".wmd",
      "application/x-ms-wmz": ".wmz",
      "application/x-ms-xbap": ".xbap",
      "application/x-msaccess": ".mdb",
      "application/x-msbinder": ".obd",
      "application/x-mscardfile": ".crd",
      "application/x-msclip": ".clp",
      "application/x-msdownload": ".dll",
      "application/x-msmediaview": ".mvb",
      "application/x-msmoney": ".mny",
      "application/x-mspublisher": ".pub",
      "application/x-msschedule": ".scd",
      "application/x-msterminal": ".trm",
      "application/x-mswrite": ".wri",
      "application/x-mysql-misam-compressed-index": ".MYI",
      "application/x-mysql-misam-data": ".MYD",
      "application/x-nesrom": ".nes",
      "application/x-netcdf": ".nc",
      "application/x-parquet": ".parquet",
      "application/x-pkcs7-certificates": ".p7b",
      "application/x-pkcs7-certreqresp": ".p7r",
      "application/x-pkcs12": ".p12",
      "application/x-project": ".mpx",
      "application/x-prt": ".prt",
      "application/x-quattro-pro": ".wq1",
      "application/x-quattro-pro; version=1+5": ".wb1",
      "application/x-quattro-pro; version=1-4": ".wq1",
      "application/x-quattro-pro; version=5": ".wq2",
      "application/x-quattro-pro; version=6": ".wb2",
      "application/x-rar-compressed": ".rar",
      "application/x-roxio-toast": ".toast",
      "application/x-rpm": ".rpm",
      "application/x-sas": ".sas",
      "application/x-sas-access": ".sa7",
      "application/x-sas-audit": ".st7",
      "application/x-sas-backup": ".sas7bbak",
      "application/x-sas-catalog": ".sc7",
      "application/x-sas-data": ".sd7",
      "application/x-sas-data-index": ".si7",
      "application/x-sas-data-v6": ".sd2",
      "application/x-sas-dmdb": ".s7m",
      "application/x-sas-fdb": ".sf7",
      "application/x-sas-itemstor": ".sr7",
      "application/x-sas-mddb": ".sm7",
      "application/x-sas-program-data": ".ss7",
      "application/x-sas-putility": ".sp7",
      "application/x-sas-transport": ".stx",
      "application/x-sas-utility": ".su7",
      "application/x-sas-view": ".sv7",
      "application/x-sas-xport": ".xpt",
      "application/x-sfdu": ".sfdu",
      "application/x-sh": ".sh",
      "application/x-shapefile": ".shp",
      "application/x-shar": ".shar",
      "application/x-shockwave-flash": ".swf",
      "application/x-silverlight-app": ".xap",
      "application/x-snappy-framed": ".sz",
      "application/x-staroffice-template": ".vor",
      "application/x-stata-do": ".do",
      "application/x-stata-dta": ".dta",
      "application/x-stuffit": ".sit",
      "application/x-stuffitx": ".sitx",
      "application/x-sv4cpio": ".sv4cpio",
      "application/x-sv4crc": ".sv4crc",
      "application/x-tar": ".tar",
      "application/x-tex": ".tex",
      "application/x-tex-tfm": ".tfm",
      "application/x-texinfo": ".texinfo",
      "application/x-tika-java-enterprise-archive": ".ear",
      "application/x-tika-java-web-archive": ".war",
      "application/x-tika-msworks-spreadsheet": ".xlr",
      "application/x-tmx": ".tmx",
      "application/x-uc2-compressed": ".uc2",
      "application/x-ustar": ".ustar",
      "application/x-vmdk": ".vmdk",
      "application/x-wais-source": ".src",
      "application/x-webarchive": ".webarchive",
      "application/x-x509-cert": ".crt",
      "application/x-x509-cert; format=der": ".der",
      "application/x-x509-cert; format=pem": ".pem",
      "application/x-xfig": ".fig",
      "application/x-xliff+xml": ".xlf",
      "application/x-xliff+zip": ".xlz",
      "application/x-xmind": ".xmind",
      "application/x-xpinstall": ".xpi",
      "application/x-xz": ".xz",
      "application/x-zoo": ".zoo",
      "application/xenc+xml": ".xenc",
      "application/xhtml+xml": ".xhtml",
      "application/xml": ".xml",
      "application/xml-dtd": ".dtd",
      "application/xop+xml": ".xop",
      "application/xquery": ".xq",
      "application/xslfo+xml": ".xslfo",
      "application/xslt+xml": ".xslt",
      "application/xspf+xml": ".xspf",
      "application/xv+xml": ".mxml",
      "application/zip": ".zip",
      "application/zstd": ".zst",
      "audio/ac3": ".ac3",
      "audio/adpcm": ".adp",
      "audio/amr": ".amr",
      "audio/basic": ".au",
      "audio/midi": ".mid",
      "audio/mp4": ".mp4a",
      "audio/mpeg": ".mpga",
      "audio/ogg": ".oga",
      "audio/opus": ".opus",
      "audio/speex": ".spx",
      "audio/vnd.adobe.soundbooth": ".asnd",
      "audio/vnd.digital-winds": ".eol",
      "audio/vnd.dts": ".dts",
      "audio/vnd.dts.hd": ".dtshd",
      "audio/vnd.lucent.voice": ".lvp",
      "audio/vnd.ms-playready.media.pya": ".pya",
      "audio/vnd.nuera.ecelp4800": ".ecelp4800",
      "audio/vnd.nuera.ecelp7470": ".ecelp7470",
      "audio/vnd.nuera.ecelp9600": ".ecelp9600",
      "audio/vnd.wave": ".wav",
      "audio/vorbis": ".ogg",
      "audio/x-aac": ".aac",
      "audio/x-aiff": ".aif",
      "audio/x-caf": ".caf",
      "audio/x-flac": ".flac",
      "audio/x-matroska": ".mka",
      "audio/x-mod": ".mod",
      "audio/x-mpegurl": ".m3u",
      "audio/x-ms-wax": ".wax",
      "audio/x-ms-wma": ".wma",
      "audio/x-pn-realaudio": ".ram",
      "audio/x-pn-realaudio-plugin": ".rmp",
      "chemical/x-cdx": ".cdx",
      "chemical/x-cif": ".cif",
      "chemical/x-cmdf": ".cmdf",
      "chemical/x-cml": ".cml",
      "chemical/x-csml": ".csml",
      "chemical/x-pdb": ".pdb",
      "chemical/x-xyz": ".xyz",
      "image/aces": ".exr",
      "image/avif": ".avif",
      "image/bmp": ".bmp",
      "image/cgm": ".cgm",
      "image/emf": ".emf",
      "image/g3fax": ".g3",
      "image/gif": ".gif",
      "image/heic": ".heic",
      "image/heif": ".heif",
      "image/icns": ".icns",
      "image/ief": ".ief",
      "image/jp2": ".jp2",
      "image/jpeg": ".jpg",
      "image/jpm": ".jpm",
      "image/jpx": ".jpf",
      "image/jxl": ".jxl",
      "image/nitf": ".ntf",
      "image/png": ".png",
      "image/prs.btif": ".btif",
      "image/svg+xml": ".svg",
      "image/tiff": ".tiff",
      "image/vnd.adobe.photoshop": ".psd",
      "image/vnd.adobe.premiere": ".ppj",
      "image/vnd.dgn": ".dgn",
      "image/vnd.djvu": ".djvu",
      "image/vnd.dwg": ".dwg",
      "image/vnd.dxb": ".dxb",
      "image/vnd.dxf": ".dxf",
      "image/vnd.fastbidsheet": ".fbs",
      "image/vnd.fpx": ".fpx",
      "image/vnd.fst": ".fst",
      "image/vnd.fujixerox.edmics-mmr": ".mmr",
      "image/vnd.fujixerox.edmics-rlc": ".rlc",
      "image/vnd.microsoft.icon": ".ico",
      "image/vnd.ms-modi": ".mdi",
      "image/vnd.net-fpx": ".npx",
      "image/vnd.wap.wbmp": ".wbmp",
      "image/vnd.xiff": ".xif",
      "image/vnd.zbrush.dcx": ".dcx",
      "image/vnd.zbrush.pcx": ".pcx",
      "image/webp": ".webp",
      "image/wmf": ".wmf",
      "image/x-bpg": ".bpg",
      "image/x-cmu-raster": ".ras",
      "image/x-cmx": ".cmx",
      "image/x-dpx": ".dpx",
      "image/x-emf-compressed": ".emz",
      "image/x-freehand": ".fh",
      "image/x-jbig2": ".jb2",
      "image/x-jp2-codestream": ".j2c",
      "image/x-pict": ".pic",
      "image/x-portable-anymap": ".pnm",
      "image/x-portable-bitmap": ".pbm",
      "image/x-portable-graymap": ".pgm",
      "image/x-portable-pixmap": ".ppm",
      "image/x-raw-adobe": ".dng",
      "image/x-raw-canon": ".crw",
      "image/x-raw-casio": ".bay",
      "image/x-raw-epson": ".erf",
      "image/x-raw-fuji": ".raf",
      "image/x-raw-hasselblad": ".3fr",
      "image/x-raw-imacon": ".fff",
      "image/x-raw-kodak": ".k25",
      "image/x-raw-leaf": ".mos",
      "image/x-raw-logitech": ".pxn",
      "image/x-raw-mamiya": ".mef",
      "image/x-raw-minolta": ".mrw",
      "image/x-raw-nikon": ".nef",
      "image/x-raw-olympus": ".orf",
      "image/x-raw-panasonic": ".raw",
      "image/x-raw-pentax": ".ptx",
      "image/x-raw-phaseone": ".iiq",
      "image/x-raw-rawzor": ".rwz",
      "image/x-raw-red": ".r3d",
      "image/x-raw-sigma": ".x3f",
      "image/x-raw-sony": ".arw",
      "image/x-rgb": ".rgb",
      "image/x-tga": ".tga",
      "image/x-xbitmap": ".xbm",
      "image/x-xcf": ".xcf",
      "image/x-xpixmap": ".xpm",
      "image/x-xwindowdump": ".xwd",
      "message/rfc822": ".eml",
      "message/x-emlx": ".emlx",
      "model/e57": ".e57",
      "model/iges": ".igs",
      "model/mesh": ".msh",
      "model/vnd.dwf": ".dwf",
      "model/vnd.dwfx+xps": ".dwfx",
      "model/vnd.gdl": ".gdl",
      "model/vnd.gtw": ".gtw",
      "model/vnd.mts": ".mts",
      "model/vnd.vtu": ".vtu",
      "model/vrml": ".wrl",
      "multipart/related": ".mht",
      "text/asp": ".asp",
      "text/aspdotnet": ".aspx",
      "text/calendar": ".ics",
      "text/css": ".css",
      "text/csv": ".csv",
      "text/html": ".html",
      "text/iso19139+xml": ".iso19139",
      "text/plain": ".txt",
      "text/prs.lines.tag": ".dsc",
      "text/richtext": ".rtx",
      "text/sgml": ".sgml",
      "text/tab-separated-values": ".tsv",
      "text/troff": ".t",
      "text/uri-list": ".uri",
      "text/vnd.curl": ".curl",
      "text/vnd.curl.dcurl": ".dcurl",
      "text/vnd.curl.mcurl": ".mcurl",
      "text/vnd.curl.scurl": ".scurl",
      "text/vnd.fly": ".fly",
      "text/vnd.fmi.flexstor": ".flx",
      "text/vnd.graphviz": ".gv",
      "text/vnd.in3d.3dml": ".3dml",
      "text/vnd.in3d.spot": ".spot",
      "text/vnd.iptc.anpa": ".anpa",
      "text/vnd.sun.j2me.app-descriptor": ".jad",
      "text/vnd.wap.wml": ".wml",
      "text/vnd.wap.wmlscript": ".wmls",
      "text/vtt": ".vtt",
      "text/x-actionscript": ".as",
      "text/x-ada": ".ada",
      "text/x-applescript": ".applescript",
      "text/x-asciidoc": ".asciidoc",
      "text/x-aspectj": ".aj",
      "text/x-assembly": ".s",
      "text/x-awk": ".awk",
      "text/x-basic": ".bas",
      "text/x-c++hdr": ".hpp",
      "text/x-c++src": ".cpp",
      "text/x-cgi": ".cgi",
      "text/x-chdr": ".h",
      "text/x-clojure": ".clj",
      "text/x-cobol": ".cbl",
      "text/x-coffeescript": ".coffee",
      "text/x-coldfusion": ".cfm",
      "text/x-common-lisp": ".cl",
      "text/x-config": ".config",
      "text/x-csharp": ".cs",
      "text/x-csrc": ".c",
      "text/x-d": ".d",
      "text/x-diff": ".diff",
      "text/x-eiffel": ".e",
      "text/x-emacs-lisp": ".el",
      "text/x-erlang": ".erl",
      "text/x-expect": ".exp",
      "text/x-forth": ".4th",
      "text/x-fortran": ".f",
      "text/x-go": ".go",
      "text/x-groovy": ".groovy",
      "text/x-haml": ".haml",
      "text/x-haskell": ".hs",
      "text/x-haxe": ".hx",
      "text/x-idl": ".idl",
      "text/x-ini": ".ini",
      "text/x-java-properties": ".properties",
      "text/x-java-source": ".java",
      "text/x-jsp": ".jsp",
      "text/x-less": ".less",
      "text/x-lex": ".l",
      "text/x-log": ".log",
      "text/x-lua": ".lua",
      "text/x-ml": ".ml",
      "text/x-modula": ".m3",
      "text/x-objcsrc": ".m",
      "text/x-ocaml": ".ocaml",
      "text/x-pascal": ".p",
      "text/x-perl": ".pl",
      "text/x-php": ".php",
      "text/x-prolog": ".pro",
      "text/x-python": ".py",
      "text/x-rexx": ".rexx",
      "text/x-rsrc": ".r",
      "text/x-rst": ".rest",
      "text/x-ruby": ".rb",
      "text/x-scala": ".scala",
      "text/x-scheme": ".scm",
      "text/x-sed": ".sed",
      "text/x-setext": ".etx",
      "text/x-sql": ".sql",
      "text/x-stsrc": ".st",
      "text/x-tcl": ".itk",
      "text/x-uuencode": ".uu",
      "text/x-vbasic": ".cls",
      "text/x-vbdotnet": ".vb",
      "text/x-vbscript": ".vbs",
      "text/x-vcalendar": ".vcs",
      "text/x-vcard": ".vcf",
      "text/x-verilog": ".v",
      "text/x-vhdl": ".vhd",
      "text/x-web-markdown": ".md",
      "text/x-yacc": ".y",
      "text/x-yaml": ".yaml",
      "video/3gpp": ".3gp",
      "video/3gpp2": ".3g2",
      "video/h261": ".h261",
      "video/h263": ".h263",
      "video/h264": ".h264",
      "video/iso.segment": ".m4s",
      "video/jpeg": ".jpgv",
      "video/mj2": ".mj2",
      "video/mp4": ".mp4",
      "video/mpeg": ".mpeg",
      "video/ogg": ".ogv",
      "video/quicktime": ".qt",
      "video/vnd.fvt": ".fvt",
      "video/vnd.mpegurl": ".mxu",
      "video/vnd.ms-playready.media.pyv": ".pyv",
      "video/vnd.vivo": ".viv",
      "video/webm": ".webm",
      "video/x-dirac": ".drc",
      "video/x-f4v": ".f4v",
      "video/x-flc": ".flc",
      "video/x-fli": ".fli",
      "video/x-flv": ".flv",
      "video/x-jng": ".jng",
      "video/x-m4v": ".m4v",
      "video/x-matroska": ".mkv",
      "video/x-mng": ".mng",
      "video/x-ms-asf": ".asf",
      "video/x-ms-wm": ".wm",
      "video/x-ms-wmv": ".wmv",
      "video/x-ms-wmx": ".wmx",
      "video/x-ms-wvx": ".wvx",
      "video/x-msvideo": ".avi",
      "video/x-ogm": ".ogm",
      "video/x-sgi-movie": ".movie",
      "x-conference/x-cooltalk": ".ice"
    };
    var typeToExtension = (options) => {
      if (options.fileExtension) {
        return options.fileExtension.startsWith(".") ? options.fileExtension : `.${options.fileExtension}`;
      }
      return extensionsByType[options.contentType] || "";
    };
    exports2.typeToExtension = typeToExtension;
  }
});

// ../allure-js-commons/dist/src/writers/index.js
var require_writers = __commonJS({
  "../allure-js-commons/dist/src/writers/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MessageAllureWriter = exports2.InMemoryAllureWriter = exports2.FileSystemAllureWriter = void 0;
    var FileSystemAllureWriter_1 = require_FileSystemAllureWriter();
    Object.defineProperty(exports2, "FileSystemAllureWriter", { enumerable: true, get: function() {
      return FileSystemAllureWriter_1.FileSystemAllureWriter;
    } });
    var InMemoryAllureWriter_1 = require_InMemoryAllureWriter();
    Object.defineProperty(exports2, "InMemoryAllureWriter", { enumerable: true, get: function() {
      return InMemoryAllureWriter_1.InMemoryAllureWriter;
    } });
    var MessageAllureWriter_1 = require_MessageAllureWriter();
    Object.defineProperty(exports2, "MessageAllureWriter", { enumerable: true, get: function() {
      return MessageAllureWriter_1.MessageAllureWriter;
    } });
    __exportStar(require_utils2(), exports2);
  }
});

// ../allure-js-commons/dist/src/AllureRuntime.js
var require_AllureRuntime = __commonJS({
  "../allure-js-commons/dist/src/AllureRuntime.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AllureRuntime = void 0;
    var crypto_1 = require("crypto");
    var AllureGroup_1 = require_AllureGroup();
    var writers_1 = require_writers();
    var buildAttachmentFileName = (options) => {
      if (typeof options === "string") {
        options = { contentType: options };
      }
      const extension = (0, writers_1.typeToExtension)(options);
      return `${(0, crypto_1.randomUUID)()}-attachment${extension}`;
    };
    var AllureRuntime2 = class {
      constructor(config) {
        this.config = config;
        this.writer = config.writer || new writers_1.FileSystemAllureWriter(config);
      }
      startGroup(name) {
        const allureContainer = new AllureGroup_1.AllureGroup(this);
        allureContainer.name = name || "Unnamed";
        return allureContainer;
      }
      writeResult(result) {
        const modifiedResult = this.config.testMapper !== void 0 ? this.config.testMapper(result) : result;
        if (modifiedResult != null) {
          this.writer.writeResult(modifiedResult);
        }
      }
      writeGroup(result) {
        this.writer.writeGroup(result);
      }
      writeAttachment(content, options, encoding) {
        const fileName = buildAttachmentFileName(options);
        this.writer.writeAttachment(fileName, content, encoding);
        return fileName;
      }
      writeAttachmentFromPath(fromPath, options) {
        const fileName = buildAttachmentFileName(options);
        this.writer.writeAttachmentFromPath(fromPath, fileName);
        return fileName;
      }
      writeEnvironmentInfo(info) {
        this.writer.writeEnvironmentInfo(info || process.env);
      }
      writeCategoriesDefinitions(categories) {
        const serializedCategories = categories.map((c) => {
          if (c.messageRegex instanceof RegExp) {
            c.messageRegex = c.messageRegex.source;
          }
          if (c.traceRegex instanceof RegExp) {
            c.traceRegex = c.traceRegex.source;
          }
          return c;
        });
        this.writer.writeCategoriesDefinitions(serializedCategories);
      }
    };
    exports2.AllureRuntime = AllureRuntime2;
  }
});

// ../allure-js-commons/dist/src/Allure.js
var require_Allure = __commonJS({
  "../allure-js-commons/dist/src/Allure.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Allure = void 0;
    var model_1 = require_model();
    var Allure = class {
      constructor(runtime) {
        this.runtime = runtime;
      }
      testCaseId(id) {
        this.currentTest.testCaseId = id;
      }
      historyId(id) {
        this.currentTest.historyId = id;
      }
      epic(epic) {
        this.label(model_1.LabelName.EPIC, epic);
      }
      feature(feature) {
        this.label(model_1.LabelName.FEATURE, feature);
      }
      story(story) {
        this.label(model_1.LabelName.STORY, story);
      }
      suite(name) {
        this.label(model_1.LabelName.SUITE, name);
      }
      parentSuite(name) {
        this.label(model_1.LabelName.PARENT_SUITE, name);
      }
      subSuite(name) {
        this.label(model_1.LabelName.SUB_SUITE, name);
      }
      label(name, value) {
        this.currentTest.addLabel(name, value);
      }
      parameter(name, value, options) {
        this.currentExecutable.parameter(name, value, options);
      }
      link(url, name, type) {
        this.currentTest.addLink(url, name, type);
      }
      issue(name, url) {
        this.link(url, name, model_1.LinkType.ISSUE);
      }
      tms(name, url) {
        this.link(url, name, model_1.LinkType.TMS);
      }
      description(markdown) {
        this.currentExecutable.description = markdown;
      }
      descriptionHtml(html) {
        this.currentExecutable.descriptionHtml = html;
      }
      owner(owner) {
        this.label(model_1.LabelName.OWNER, owner);
      }
      severity(severity) {
        this.label(model_1.LabelName.SEVERITY, severity);
      }
      layer(layer) {
        this.label(model_1.LabelName.LAYER, layer);
      }
      id(allureId) {
        this.label(model_1.LabelName.ALLURE_ID, allureId);
      }
      tag(tag) {
        this.label(model_1.LabelName.TAG, tag);
      }
      writeEnvironmentInfo(info) {
        this.runtime.writeEnvironmentInfo(info);
      }
      writeCategoriesDefinitions(categories) {
        this.runtime.writeCategoriesDefinitions(categories);
      }
    };
    exports2.Allure = Allure;
  }
});

// ../allure-js-commons/dist/src/testplan.js
var require_testplan = __commonJS({
  "../allure-js-commons/dist/src/testplan.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseTestPlan = void 0;
    var fs_1 = __importDefault(require("fs"));
    var parseTestPlan = () => {
      const testPlanPath = process.env.ALLURE_TESTPLAN_PATH;
      if (!testPlanPath) {
        return void 0;
      }
      try {
        const file = fs_1.default.readFileSync(testPlanPath, "utf8");
        const testPlan = JSON.parse(file);
        if ((testPlan.tests || []).length === 0) {
          return void 0;
        }
        return testPlan;
      } catch (e) {
        return void 0;
      }
    };
    exports2.parseTestPlan = parseTestPlan;
  }
});

// ../allure-js-commons/dist/index.js
var require_dist = __commonJS({
  "../allure-js-commons/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseTestPlan = exports2.extractMetadataFromString = exports2.stripAscii = exports2.serialize = exports2.readImageAsBase64 = exports2.md5 = exports2.isAnyStepFailed = exports2.getSuitesLabels = exports2.getStatusFromError = exports2.getLabelsFromEnv = exports2.escapeRegExp = exports2.allureReportFolder = exports2.allureLabelRegexpGlobal = exports2.allureLabelRegexp = exports2.allureIdRegexpGlobal = exports2.allureIdRegexp = exports2.LinkType = exports2.Status = exports2.Stage = exports2.Severity = exports2.LabelName = exports2.ContentType = exports2.AllureCommandStepExecutable = exports2.Allure = exports2.isPromise = exports2.AllureStep = exports2.AllureTest = exports2.ExecutableItemWrapper = exports2.AllureGroup = exports2.MessageAllureWriter = exports2.FileSystemAllureWriter = exports2.InMemoryAllureWriter = exports2.typeToExtension = exports2.AllureRuntime = void 0;
    var AllureRuntime_1 = require_AllureRuntime();
    Object.defineProperty(exports2, "AllureRuntime", { enumerable: true, get: function() {
      return AllureRuntime_1.AllureRuntime;
    } });
    var writers_1 = require_writers();
    Object.defineProperty(exports2, "typeToExtension", { enumerable: true, get: function() {
      return writers_1.typeToExtension;
    } });
    Object.defineProperty(exports2, "InMemoryAllureWriter", { enumerable: true, get: function() {
      return writers_1.InMemoryAllureWriter;
    } });
    Object.defineProperty(exports2, "FileSystemAllureWriter", { enumerable: true, get: function() {
      return writers_1.FileSystemAllureWriter;
    } });
    Object.defineProperty(exports2, "MessageAllureWriter", { enumerable: true, get: function() {
      return writers_1.MessageAllureWriter;
    } });
    var AllureGroup_1 = require_AllureGroup();
    Object.defineProperty(exports2, "AllureGroup", { enumerable: true, get: function() {
      return AllureGroup_1.AllureGroup;
    } });
    var ExecutableItemWrapper_1 = require_ExecutableItemWrapper();
    Object.defineProperty(exports2, "ExecutableItemWrapper", { enumerable: true, get: function() {
      return ExecutableItemWrapper_1.ExecutableItemWrapper;
    } });
    var AllureTest_1 = require_AllureTest();
    Object.defineProperty(exports2, "AllureTest", { enumerable: true, get: function() {
      return AllureTest_1.AllureTest;
    } });
    var ExecutableItemWrapper_2 = require_ExecutableItemWrapper();
    Object.defineProperty(exports2, "AllureStep", { enumerable: true, get: function() {
      return ExecutableItemWrapper_2.AllureStep;
    } });
    var isPromise_1 = require_isPromise();
    Object.defineProperty(exports2, "isPromise", { enumerable: true, get: function() {
      return isPromise_1.isPromise;
    } });
    var Allure_1 = require_Allure();
    Object.defineProperty(exports2, "Allure", { enumerable: true, get: function() {
      return Allure_1.Allure;
    } });
    var AllureCommandStep_1 = require_AllureCommandStep();
    Object.defineProperty(exports2, "AllureCommandStepExecutable", { enumerable: true, get: function() {
      return AllureCommandStep_1.AllureCommandStepExecutable;
    } });
    var model_1 = require_model();
    Object.defineProperty(exports2, "ContentType", { enumerable: true, get: function() {
      return model_1.ContentType;
    } });
    Object.defineProperty(exports2, "LabelName", { enumerable: true, get: function() {
      return model_1.LabelName;
    } });
    Object.defineProperty(exports2, "Severity", { enumerable: true, get: function() {
      return model_1.Severity;
    } });
    Object.defineProperty(exports2, "Stage", { enumerable: true, get: function() {
      return model_1.Stage;
    } });
    Object.defineProperty(exports2, "Status", { enumerable: true, get: function() {
      return model_1.Status;
    } });
    Object.defineProperty(exports2, "LinkType", { enumerable: true, get: function() {
      return model_1.LinkType;
    } });
    var utils_1 = require_utils();
    Object.defineProperty(exports2, "allureIdRegexp", { enumerable: true, get: function() {
      return utils_1.allureIdRegexp;
    } });
    Object.defineProperty(exports2, "allureIdRegexpGlobal", { enumerable: true, get: function() {
      return utils_1.allureIdRegexpGlobal;
    } });
    Object.defineProperty(exports2, "allureLabelRegexp", { enumerable: true, get: function() {
      return utils_1.allureLabelRegexp;
    } });
    Object.defineProperty(exports2, "allureLabelRegexpGlobal", { enumerable: true, get: function() {
      return utils_1.allureLabelRegexpGlobal;
    } });
    Object.defineProperty(exports2, "allureReportFolder", { enumerable: true, get: function() {
      return utils_1.allureReportFolder;
    } });
    Object.defineProperty(exports2, "escapeRegExp", { enumerable: true, get: function() {
      return utils_1.escapeRegExp;
    } });
    Object.defineProperty(exports2, "getLabelsFromEnv", { enumerable: true, get: function() {
      return utils_1.getLabelsFromEnv;
    } });
    Object.defineProperty(exports2, "getStatusFromError", { enumerable: true, get: function() {
      return utils_1.getStatusFromError;
    } });
    Object.defineProperty(exports2, "getSuitesLabels", { enumerable: true, get: function() {
      return utils_1.getSuitesLabels;
    } });
    Object.defineProperty(exports2, "isAnyStepFailed", { enumerable: true, get: function() {
      return utils_1.isAnyStepFailed;
    } });
    Object.defineProperty(exports2, "md5", { enumerable: true, get: function() {
      return utils_1.md5;
    } });
    Object.defineProperty(exports2, "readImageAsBase64", { enumerable: true, get: function() {
      return utils_1.readImageAsBase64;
    } });
    Object.defineProperty(exports2, "serialize", { enumerable: true, get: function() {
      return utils_1.serialize;
    } });
    Object.defineProperty(exports2, "stripAscii", { enumerable: true, get: function() {
      return utils_1.stripAscii;
    } });
    Object.defineProperty(exports2, "extractMetadataFromString", { enumerable: true, get: function() {
      return utils_1.extractMetadataFromString;
    } });
    var testplan_1 = require_testplan();
    Object.defineProperty(exports2, "parseTestPlan", { enumerable: true, get: function() {
      return testplan_1.parseTestPlan;
    } });
  }
});

// src/reporter.ts
var reporter_exports = {};
__export(reporter_exports, {
  allureCypress: () => allureCypress
});
module.exports = __toCommonJS(reporter_exports);
var import_node_fs = require("node:fs");
var import_allure_js_commons = __toESM(require_dist());
var startAllureTest = (runtime, message) => {
  const suiteLabels = (0, import_allure_js_commons.getSuitesLabels)(message.specPath.slice(0, -1));
  const testTitle = message.specPath[message.specPath.length - 1];
  const titleMetadata = (0, import_allure_js_commons.extractMetadataFromString)(testTitle);
  const currentTest = new import_allure_js_commons.AllureTest(runtime, message.start);
  currentTest.name = titleMetadata.cleanTitle;
  currentTest.fullName = `${message.filename}#${message.specPath.join(" ")}`;
  currentTest.stage = "running" /* RUNNING */;
  currentTest.addLabel("language" /* LANGUAGE */, "javascript");
  currentTest.addLabel("framework" /* FRAMEWORK */, "cypress");
  suiteLabels.forEach((label) => {
    currentTest.addLabel(label.name, label.value);
  });
  titleMetadata.labels.forEach((label) => {
    currentTest.addLabel(label.name, label.value);
  });
  return currentTest;
};
var allureCypress = (on, config) => {
  const runtime = new import_allure_js_commons.AllureRuntime({
    resultsDir: config?.resultsDir || "./allure-results"
  });
  const currentSteps = [];
  on("task", {
    allureReportTest: ({ startMessage, endMessage, messages }) => {
      const currentTest = startAllureTest(runtime, startMessage);
      messages.forEach(({ type, payload }) => {
        if (type === "STEP_STARTED" /* STEP_STARTED */) {
          const currentStep = currentSteps[currentSteps.length - 1];
          const newStep = (currentStep || currentTest).startStep(payload.name, payload.start);
          currentSteps.push(newStep);
          return;
        }
        if (type === "STEP_ENDED" /* STEP_ENDED */) {
          const currentStep = currentSteps.pop();
          currentStep.status = payload.status;
          currentStep.statusDetails = payload.statusDetails;
          currentStep.stage = payload.stage;
          currentStep.endStep(payload.stop);
          return;
        }
        if (type === "SCREENSHOT" /* SCREENSHOT */) {
          const currentStep = currentSteps[currentSteps.length - 1];
          const attachmentName = payload.name;
          const screenshotBody = (0, import_node_fs.readFileSync)(payload.path);
          const screenshotName = runtime.writeAttachment(screenshotBody, "image/png");
          (currentStep || currentTest).addAttachment(attachmentName, "image/png", screenshotName);
          return;
        }
        if (type === "METADATA" /* METADATA */) {
          const { parameter, links, attachments, ...metadata } = payload;
          const currentStep = currentSteps[currentSteps.length - 1];
          parameter?.forEach(({ name, value, excluded, mode }) => {
            currentTest.parameter(name, value, {
              excluded,
              mode
            });
          });
          attachments?.forEach((attachment) => {
            const attachmentName = runtime.writeAttachment(attachment.content, attachment.type, attachment.encoding);
            (currentStep || currentTest).addAttachment(attachment.name, attachment.type, attachmentName);
          });
          if (!config?.links?.length || !links?.length) {
            currentTest.applyMetadata(metadata);
            return;
          }
          const formattedLinks = links?.map((link) => {
            const matcher = config?.links?.find?.((item) => item.type === link.type);
            if (!matcher || link.url.startsWith("http")) {
              return link;
            }
            const url = matcher.urlTemplate.replace("%s", link.url);
            const name = link.name || link.url;
            return {
              ...link,
              name,
              url
            };
          });
          currentTest.applyMetadata({
            ...metadata,
            links: formattedLinks
          });
          return;
        }
      });
      currentTest.stage = endMessage.stage;
      currentTest.status = endMessage.status;
      currentTest.statusDetails = endMessage.statusDetails;
      currentTest.calculateHistoryId();
      currentTest.endTest(endMessage.stop);
      return null;
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  allureCypress
});
//# sourceMappingURL=reporter.js.map
