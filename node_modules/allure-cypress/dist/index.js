var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  allureId: () => allureId,
  attachment: () => attachment,
  description: () => description,
  descriptionHtml: () => descriptionHtml,
  displayName: () => displayName,
  epic: () => epic,
  feature: () => feature,
  historyId: () => historyId,
  issue: () => issue,
  label: () => label,
  layer: () => layer,
  link: () => link,
  normalizeAttachmentContentEncoding: () => normalizeAttachmentContentEncoding,
  owner: () => owner,
  parameter: () => parameter,
  parentSuite: () => parentSuite,
  severity: () => severity,
  step: () => step,
  story: () => story,
  subSuite: () => subSuite,
  suite: () => suite,
  tag: () => tag,
  testCaseId: () => testCaseId,
  tms: () => tms,
  uint8ArrayToBase64: () => uint8ArrayToBase64
});
module.exports = __toCommonJS(src_exports);

// src/utils.ts
var pushReportMessage = (message) => {
  const reportMessage = Cypress.env("allure").reportMessage;
  reportMessage.messages.push(message);
  Cypress.env("allure", { reportMessage });
};

// src/index.ts
var uint8ArrayToBase64 = (data) => {
  const u8arrayLike = Array.isArray(data) || data.buffer;
  if (!u8arrayLike) {
    return data;
  }
  return btoa(String.fromCharCode.apply(null, data));
};
var normalizeAttachmentContentEncoding = (data, encoding) => {
  const u8arrayLike = Array.isArray(data) || data.buffer;
  if (u8arrayLike) {
    return "base64";
  }
  return encoding;
};
var label = (name, value) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      labels: [{ name, value }]
    }
  });
};
var link = (url, name, type) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      links: [{ type, url, name }]
    }
  });
};
var parameter = (name, value, options) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      parameter: [{ name, value, ...options }]
    }
  });
};
var description = (markdown) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      description: markdown
    }
  });
};
var descriptionHtml = (html) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      descriptionHtml: html
    }
  });
};
var testCaseId = (value) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      testCaseId: value
    }
  });
};
var historyId = (value) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      historyId: value
    }
  });
};
var allureId = (value) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      labels: [{ name: "ALLURE_ID" /* ALLURE_ID */, value }]
    }
  });
};
var displayName = (name) => {
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      displayName: name
    }
  });
};
var issue = (url, name) => {
  link(url, name, "issue" /* ISSUE */);
};
var tms = (url, name) => {
  link(url, name, "tms" /* TMS */);
};
var epic = (name) => {
  label("epic" /* EPIC */, name);
};
var feature = (name) => {
  label("feature" /* FEATURE */, name);
};
var story = (name) => {
  label("story" /* STORY */, name);
};
var suite = (name) => {
  label("suite" /* SUITE */, name);
};
var parentSuite = (name) => {
  label("parentSuite" /* PARENT_SUITE */, name);
};
var subSuite = (name) => {
  label("subSuite" /* SUB_SUITE */, name);
};
var owner = (name) => {
  label("owner" /* OWNER */, name);
};
var severity = (name) => {
  label("severity" /* SEVERITY */, name);
};
var layer = (name) => {
  label("layer" /* LAYER */, name);
};
var tag = (name) => {
  label("tag" /* TAG */, name);
};
var attachment = (name, content, type = "text/plain", encoding = "utf8") => {
  const attachmentRawContent = content?.type === "Buffer" ? content.data : content;
  const actualEncoding = normalizeAttachmentContentEncoding(attachmentRawContent, encoding);
  const attachmentContent = uint8ArrayToBase64(attachmentRawContent);
  pushReportMessage({
    type: "METADATA" /* METADATA */,
    payload: {
      attachments: [
        {
          content: attachmentContent,
          encoding: actualEncoding,
          name,
          type
        }
      ]
    }
  });
};
var step = (name, body) => {
  cy.wrap(null, { log: false }).then(() => {
    pushReportMessage({
      type: "STEP_STARTED" /* STEP_STARTED */,
      payload: { name, start: Date.now() }
    });
    body();
  }).then(() => {
    pushReportMessage({
      type: "STEP_ENDED" /* STEP_ENDED */,
      payload: {
        status: "passed" /* PASSED */,
        stage: "finished" /* FINISHED */,
        stop: Date.now()
      }
    });
  });
};
//# sourceMappingURL=index.js.map
