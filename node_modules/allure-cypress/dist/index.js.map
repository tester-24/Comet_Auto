{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils.ts"],
  "sourcesContent": ["import { LabelName, LinkType, MessageType, type ParameterOptions, Stage, Status } from \"./model\";\nimport { pushReportMessage } from \"./utils\";\n\nexport type CypressWrappedAttachment = { type: string; data: unknown };\n\nexport const uint8ArrayToBase64 = (data: unknown) => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (!u8arrayLike) {\n    return data as string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return btoa(String.fromCharCode.apply(null, data));\n};\n\nexport const normalizeAttachmentContentEncoding = (data: unknown, encoding: BufferEncoding): BufferEncoding => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (u8arrayLike) {\n    return \"base64\";\n  }\n\n  return encoding;\n};\n\nexport const label = (name: string, value: string) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      labels: [{ name, value }],\n    },\n  });\n};\nexport const link = (url: string, name?: string, type?: string) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      links: [{ type, url, name }],\n    },\n  });\n};\nexport const parameter = (name: string, value: string, options?: ParameterOptions) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      parameter: [{ name, value, ...options }],\n    },\n  });\n};\nexport const description = (markdown: string) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      description: markdown,\n    },\n  });\n};\nexport const descriptionHtml = (html: string) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      descriptionHtml: html,\n    },\n  });\n};\nexport const testCaseId = (value: string) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      testCaseId: value,\n    },\n  });\n};\nexport const historyId = (value: string) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      historyId: value,\n    },\n  });\n};\nexport const allureId = (value: string) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      labels: [{ name: LabelName.ALLURE_ID, value }],\n    },\n  });\n};\nexport const displayName = (name: string) => {\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      displayName: name,\n    },\n  });\n};\nexport const issue = (url: string, name?: string) => {\n  link(url, name, LinkType.ISSUE);\n};\nexport const tms = (url: string, name?: string) => {\n  link(url, name, LinkType.TMS);\n};\nexport const epic = (name: string) => {\n  label(LabelName.EPIC, name);\n};\nexport const feature = (name: string) => {\n  label(LabelName.FEATURE, name);\n};\nexport const story = (name: string) => {\n  label(LabelName.STORY, name);\n};\nexport const suite = (name: string) => {\n  label(LabelName.SUITE, name);\n};\nexport const parentSuite = (name: string) => {\n  label(LabelName.PARENT_SUITE, name);\n};\nexport const subSuite = (name: string) => {\n  label(LabelName.SUB_SUITE, name);\n};\nexport const owner = (name: string) => {\n  label(LabelName.OWNER, name);\n};\nexport const severity = (name: string) => {\n  label(LabelName.SEVERITY, name);\n};\nexport const layer = (name: string) => {\n  label(LabelName.LAYER, name);\n};\nexport const tag = (name: string) => {\n  label(LabelName.TAG, name);\n};\nexport const attachment = (\n  name: string,\n  content: unknown,\n  type: string = \"text/plain\",\n  encoding: BufferEncoding = \"utf8\",\n) => {\n  // @ts-ignore\n  const attachmentRawContent: string | Uint8Array = content?.type === \"Buffer\" ? content.data : content;\n  const actualEncoding = normalizeAttachmentContentEncoding(attachmentRawContent, encoding);\n  const attachmentContent = uint8ArrayToBase64(attachmentRawContent);\n\n  pushReportMessage({\n    type: MessageType.METADATA,\n    payload: {\n      attachments: [\n        {\n          content: attachmentContent,\n          encoding: actualEncoding,\n          name,\n          type,\n        },\n      ],\n    },\n  });\n};\nexport const step = (name: string, body: () => void) => {\n  cy.wrap(null, { log: false })\n    .then(() => {\n      pushReportMessage({\n        type: MessageType.STEP_STARTED,\n        payload: { name, start: Date.now() },\n      });\n\n      body();\n    })\n    .then(() => {\n      pushReportMessage({\n        type: MessageType.STEP_ENDED,\n        payload: {\n          status: Status.PASSED,\n          stage: Stage.FINISHED,\n          stop: Date.now(),\n        },\n      });\n    });\n};\n", "import { ReportFinalMessage, ReporterMessage, TestEndMessage, TestStartMessage } from \"./model\";\n\nexport const setStartTestReportMessage = (message: TestStartMessage) => {\n  const reportMessage: ReportFinalMessage = Cypress.env(\"allure\").reportMessage;\n\n  reportMessage.startMessage = message;\n\n  Cypress.env(\"allure\", { reportMessage });\n};\n\nexport const setEndTestReportMessage = (message: TestEndMessage) => {\n  const reportMessage: ReportFinalMessage = Cypress.env(\"allure\").reportMessage;\n\n  reportMessage.endMessage = message;\n\n  Cypress.env(\"allure\", { reportMessage });\n};\n\nexport const pushReportMessage = (message: ReporterMessage) => {\n  const reportMessage: ReportFinalMessage = Cypress.env(\"allure\").reportMessage;\n\n  reportMessage.messages.push(message);\n\n  Cypress.env(\"allure\", { reportMessage });\n};\n"],
  "mappings": "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",
  "names": []
}
